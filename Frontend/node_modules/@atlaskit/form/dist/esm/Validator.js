import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/* eslint-disable no-console */
// While in dev preview console.info will be used

/* eslint-disable react/no-unused-prop-types */
import { PureComponent } from 'react';
/**
 * Result that is returned by any Validator
 */

var Validator =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Validator, _PureComponent);

  function Validator() {
    _classCallCheck(this, Validator);

    return _possibleConstructorReturn(this, _getPrototypeOf(Validator).apply(this, arguments));
  }

  _createClass(Validator, [{
    key: "render",

    /** Valiate a value using the function & options passed in as props  */

    /*validate = (value:string) => {
      let valid:boolean = this.props.func(value, this.props.options);
      // Invert result if validOn prop is false
      //if(!this.props.validOn && !valid) valid = true;
      return {
          valid,
          message: (valid)? this.props.valid : this.props.invalid
      }
    };
    */
    value: function render() {
      return null;
    }
  }]);

  return Validator;
}(PureComponent);

_defineProperty(Validator, "defaultProps", {
  func: {},
  validOnFalse: false,
  valid: '',
  invalid: ''
});

export { Validator as default };