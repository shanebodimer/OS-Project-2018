import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import styled from 'styled-components';
import { colors, gridSize, typography } from '@atlaskit/theme';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
/**
    Displays a Validation Message for a Field, FieldGroup or Section
*/

var IconWrapper = styled.span.withConfig({
  displayName: "ValidatorMessage__IconWrapper",
  componentId: "sc-1jelslt-0"
})(["\n  display: inline-block;\n  vertical-align: text-top;\n"]);

var Error = function Error() {
  return React.createElement(IconWrapper, null, React.createElement(ErrorIcon, {
    size: "small",
    role: "presentation"
  }));
};

var Success = function Success() {
  return React.createElement(IconWrapper, null, React.createElement(SuccessIcon, {
    size: "small",
    role: "presentation"
  }));
};

var Message = styled.div.withConfig({
  displayName: "ValidatorMessage__Message",
  componentId: "sc-1jelslt-1"
})(["\n  ", " font-weight: normal;\n  color: ", ";\n  margin-top: ", "px;\n"], typography.h200, function (props) {
  return props.invalid ? colors.R400 : colors.G400;
}, gridSize() / 2);

var ValidatorMessage =
/*#__PURE__*/
function (_Component) {
  _inherits(ValidatorMessage, _Component);

  function ValidatorMessage() {
    _classCallCheck(this, ValidatorMessage);

    return _possibleConstructorReturn(this, _getPrototypeOf(ValidatorMessage).apply(this, arguments));
  }

  _createClass(ValidatorMessage, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          invalidMessage = _this$props.invalidMessage,
          validMessage = _this$props.validMessage,
          isInvalid = _this$props.isInvalid; // Validation state is invalid, valid or not validated (null)

      if (isInvalid) {
        return React.createElement(Message, {
          invalid: true
        }, React.createElement(Error, null), invalidMessage); // If the field hasn't been validated yet then isInvalid will be undefined
      } else if (this.props.isInvalid !== undefined && validMessage && validMessage.length) {
        return React.createElement(Message, null, React.createElement(Success, null), validMessage);
      }

      return null;
    }
  }]);

  return ValidatorMessage;
}(Component);

_defineProperty(ValidatorMessage, "defaultProps", {
  invalidMessage: '',
  validMessage: '',
  isInvalid: undefined,
  type: 'field'
});

export { ValidatorMessage as default };