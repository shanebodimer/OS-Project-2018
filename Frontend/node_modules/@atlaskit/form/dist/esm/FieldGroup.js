import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import FieldGroupWrapper from './styled/FieldGroup';

var FieldGroup =
/*#__PURE__*/
function (_Component) {
  _inherits(FieldGroup, _Component);

  function FieldGroup() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FieldGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FieldGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      layout: _this.props.layout
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderChildren", function () {
      return React.Children.map(_this.props.children, function (child) {
        return React.cloneElement(child, {
          form: _this.props.form
        });
      });
    });

    return _this;
  }

  _createClass(FieldGroup, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          layout = _this$props.layout,
          name = _this$props.name;
      return React.createElement(FieldGroupWrapper, {
        label: label,
        layout: layout,
        name: name
      }, this.renderChildren());
    }
  }]);

  return FieldGroup;
}(Component);

_defineProperty(FieldGroup, "defaultProps", {
  layout: 'column'
});

export { FieldGroup as default };