"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _Form = _interopRequireDefault(require("./styled/Form"));

/* eslint-disable react/no-unused-prop-types */
var Form =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Form, _Component);

  function Form(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Form);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Form).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "form", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "fields", {
      fieldStates: [],
      validFields: [],
      invalidFields: [],
      isInvalid: false,
      isValidated: false,
      isSubmitted: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onSubmit", function (event) {
      if (_this.props.onSubmit) {
        _this.props.onSubmit(event);

        event.preventDefault();
        event.stopPropagation();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onValidate", function (event) {
      if (_this.props.onValidate) _this.props.onValidate(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "initFields", function () {
      return {
        fieldStates: [],
        validFields: [],
        invalidFields: [],
        isInvalid: false,
        isValidated: false,
        isSubmitted: false
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getForm", function () {
      var name = _this.state.name;

      var _assertThisInitialize = (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)),
          registerField = _assertThisInitialize.registerField,
          unregisterField = _assertThisInitialize.unregisterField,
          getFieldByName = _assertThisInitialize.getFieldByName,
          setFieldState = _assertThisInitialize.setFieldState,
          submit = _assertThisInitialize.submit,
          validate = _assertThisInitialize.validate,
          reset = _assertThisInitialize.reset,
          fields = _assertThisInitialize.fields;

      return {
        name: name,
        fields: fields,
        registerField: registerField,
        unregisterField: unregisterField,
        getFieldByName: getFieldByName,
        setFieldState: setFieldState,
        submit: submit,
        validate: validate,
        reset: reset
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "registerField", function (fieldState) {
      var prevFields = (0, _objectSpread2.default)({}, _this.fields);
      _this.fields = (0, _objectSpread2.default)({}, prevFields, {
        fieldStates: (0, _toConsumableArray2.default)(prevFields.fieldStates).concat([fieldState])
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setFieldState", function (fieldState) {
      var _this$fields = _this.fields,
          fieldStates = _this$fields.fieldStates,
          rest = (0, _objectWithoutProperties2.default)(_this$fields, ["fieldStates"]);
      var updatedFieldStates = fieldStates.map(function (obj) {
        return obj.name === fieldState.name ? fieldState : obj;
      });
      _this.fields = (0, _objectSpread2.default)({}, rest, {
        fieldStates: updatedFieldStates
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "unregisterField", function (name) {
      var _this$fields2 = _this.fields,
          fieldStates = _this$fields2.fieldStates,
          rest = (0, _objectWithoutProperties2.default)(_this$fields2, ["fieldStates"]);
      var fieldState = fieldStates.find(function (field) {
        return field.name === name;
      });
      _this.fields = (0, _objectSpread2.default)({}, rest, {
        fieldStates: fieldStates.splice(fieldStates.indexOf(fieldState))
      });
      return fieldState;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getFieldByName", function (name) {
      return _this.fields.fieldStates.find(function (fieldState) {
        return fieldState.name === name;
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "submit", function () {
      _this.form.submit();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "reset", function () {
      _this.form.reset();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "validate", function () {
      var fields = _this.getForm().fields; // Reset our validate results


      fields.invalidFields = [];
      fields.validFields = [];
      fields.isInvalid = false;

      for (var i = 0; i < fields.fieldStates.length; i++) {
        if (fields.fieldStates[i].validate) {
          var validatedFieldState = fields.fieldStates[i].validate();

          if (validatedFieldState.isInvalid) {
            fields.invalidFields.push(fields.fieldStates[i]);
          } else {
            fields.validFields.push(fields.fieldStates[i]);
          }

          fields.isInvalid = !!fields.invalidFields.length;
          fields.isValidated = true;
        }
      } // Update Form validation


      return fields;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderHeader", function () {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderChildren", function () {
      return _react.default.Children.map(_this.props.children, function (child) {
        return _react.default.cloneElement(child, {
          form: _this.getForm()
        });
      });
    });
    _this.state = {
      name: _this.props.name,
      sections: [],
      header: null,
      footer: null
    };
    return _this;
  } // Reference to the form in the DOM so we can call submit, reset...


  (0, _createClass2.default)(Form, [{
    key: "componentDidMount",

    /** Extract Header, Footer & Sections */
    value: function componentDidMount() {
      if (this.form) {
        // $FlowFixMe Only for dev preview. TODO: resolve this type error
        this.form.addEventListener('submit', this.onSubmit);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.form) {
        // $FlowFixMe Only for dev preview. TODO: resolve this type error
        this.form.removeEventListener('submit', this.onSubmit);
      }
    } // EVENT HANDLERS

  }, {
    key: "render",

    /** The bulk of the rendering & layout for the forms childrens is done when the component mounts.
     * We inject references to the form via cloneElement
     */
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          action = _this$props.action,
          encType = _this$props.encType,
          method = _this$props.method,
          name = _this$props.name,
          target = _this$props.target,
          accept = _this$props.accept,
          acceptCharset = _this$props.acceptCharset,
          autoComplete = _this$props.autoComplete;
      return _react.default.createElement(_Form.default, null, _react.default.createElement("form", {
        action: action,
        encType: encType,
        method: method,
        name: name,
        target: target,
        accept: accept,
        acceptCharset: acceptCharset,
        autoComplete: autoComplete // $FlowFixMe Only for dev preview. TODO: resolve this type error
        ,
        ref: function ref(form) {
          _this2.form = form;
        }
      }, this.renderChildren()));
    }
  }]);
  return Form;
}(_react.Component);

exports.default = Form;
(0, _defineProperty2.default)(Form, "defaultProps", {
  target: '_self'
});