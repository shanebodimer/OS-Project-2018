import _objectSpread from "@babel/runtime/helpers/objectSpread";

var getAppearanceProps = function getAppearanceProps(props, state) {
  var appearance = props.appearance,
      className = props.className,
      isDisabled = props.isDisabled,
      isLoading = props.isLoading,
      isSelected = props.isSelected,
      spacing = props.spacing,
      shouldFitContainer = props.shouldFitContainer;
  var isActive = state.isActive,
      isFocus = state.isFocus,
      isHover = state.isHover;
  return {
    appearance: appearance,
    className: className,
    disabled: isDisabled,
    isActive: isActive,
    isFocus: isFocus,
    isHover: isHover,
    isLoading: isLoading,
    isSelected: isSelected,
    spacing: spacing,
    fit: shouldFitContainer
  };
};

var getInteractionProps = function getInteractionProps(component) {
  var onBlur = component.onBlur,
      onFocus = component.onFocus,
      onMouseDown = component.onMouseDown,
      onMouseEnter = component.onMouseEnter,
      onMouseLeave = component.onMouseLeave,
      onMouseUp = component.onMouseUp;
  var tabIndex = component.props.tabIndex; // Block onClick/Keyboard submit while isLoading

  var onClick = component.props.isLoading ? function (e) {
    e.preventDefault();
  } : component.props.onClick;
  return {
    onBlur: onBlur,
    onClick: onClick,
    onFocus: onFocus,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseUp: onMouseUp,
    tabIndex: tabIndex
  };
};

var getLinkElementProps = function getLinkElementProps(props) {
  var href = props.href,
      target = props.target;
  return {
    href: href,
    target: target
  };
};

var getButtonElementProps = function getButtonElementProps(props) {
  var ariaHaspopup = props.ariaHaspopup,
      ariaExpanded = props.ariaExpanded,
      ariaControls = props.ariaControls,
      form = props.form,
      type = props.type;
  return {
    'aria-haspopup': ariaHaspopup,
    'aria-expanded': ariaExpanded,
    'aria-controls': ariaControls,
    form: form,
    type: type
  };
};

var getButtonProps = function getButtonProps(component) {
  var props = component.props,
      state = component.state;

  var defaultProps = _objectSpread({
    id: props.id
  }, getAppearanceProps(props, state), getInteractionProps(component), {
    'aria-label': props.ariaLabel
  });

  if (props.component) {
    return _objectSpread({}, props, defaultProps);
  }

  if (props.href) {
    if (props.isDisabled) {
      return defaultProps;
    }

    return _objectSpread({}, defaultProps, getLinkElementProps(props));
  }

  return _objectSpread({}, defaultProps, getButtonElementProps(props));
};

export default getButtonProps;