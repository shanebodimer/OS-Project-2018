import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';

var getComponentName = function getComponentName(target) {
  if (target.displayName && typeof target.displayName === 'string') {
    return target.displayName;
  }

  return target.name || 'Component';
};

var warnIfDeprecatedAppearance = function warnIfDeprecatedAppearance(appearance) {
  var deprecatedAppearances = ['help'];

  if (appearance && deprecatedAppearances.includes(appearance)) {
    // eslint-disable-next-line no-console
    console.warn("Atlaskit: The Button appearance \"".concat(appearance, "\" is deprecated. Please use styled-components' ThemeProvider to provide a custom theme for Button instead."));
  }
};

export default function withDeprecationWarnings(WrappedComponent) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_Component) {
    _inherits(WithDeprecationWarnings, _Component);

    function WithDeprecationWarnings() {
      _classCallCheck(this, WithDeprecationWarnings);

      return _possibleConstructorReturn(this, _getPrototypeOf(WithDeprecationWarnings).apply(this, arguments));
    }

    _createClass(WithDeprecationWarnings, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        warnIfDeprecatedAppearance(this.props.appearance);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        if (newProps.appearance !== this.props.appearance) {
          warnIfDeprecatedAppearance(newProps.appearance);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(WrappedComponent, this.props);
      }
    }]);

    return WithDeprecationWarnings;
  }(Component), _defineProperty(_class, "displayName", "WithDeprecationWarnings(".concat(getComponentName(WrappedComponent), ")")), _temp;
}