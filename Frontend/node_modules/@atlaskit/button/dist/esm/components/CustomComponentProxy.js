import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { Component } from 'react';
import { cleanProps } from '@atlaskit/analytics-next';
/**
 * Styling a button is complicated and there are a number of properties which inform its appearance.
 * We want to be able to style any arbitrary component like a button, but we don't want to pass all
 * of these appearance-related props through to the component or underlying DOM node. This component
 * acts as a layer which catches the appearance-related properties so that they can be used by
 * styled-components, then passes the rest of the props on to the custom component.
 */

var CustomComponentProxy =
/*#__PURE__*/
function (_Component) {
  _inherits(CustomComponentProxy, _Component);

  function CustomComponentProxy() {
    _classCallCheck(this, CustomComponentProxy);

    return _possibleConstructorReturn(this, _getPrototypeOf(CustomComponentProxy).apply(this, arguments));
  }

  _createClass(CustomComponentProxy, [{
    key: "render",
    value: function render() {
      var _cleanProps = cleanProps(this.props),
          appearance = _cleanProps.appearance,
          children = _cleanProps.children,
          component = _cleanProps.component,
          isActive = _cleanProps.isActive,
          isDisabled = _cleanProps.isDisabled,
          isFocus = _cleanProps.isFocus,
          isHover = _cleanProps.isHover,
          isSelected = _cleanProps.isSelected,
          shouldFitContainer = _cleanProps.shouldFitContainer,
          fit = _cleanProps.fit,
          iconBefore = _cleanProps.iconBefore,
          iconAfter = _cleanProps.iconAfter,
          isLoading = _cleanProps.isLoading,
          proxiedProps = _objectWithoutProperties(_cleanProps, ["appearance", "children", "component", "isActive", "isDisabled", "isFocus", "isHover", "isSelected", "shouldFitContainer", "fit", "iconBefore", "iconAfter", "isLoading"]);

      if (!component) throw new Error('No custom component provided while trying to use custom button component');
      var ProxiedComponent = component;
      return React.createElement(ProxiedComponent, proxiedProps, children);
    }
  }]);

  return CustomComponentProxy;
}(Component);

export default CustomComponentProxy;