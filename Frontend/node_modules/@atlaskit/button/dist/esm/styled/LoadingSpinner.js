import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import styled from 'styled-components';
import Spinner from '@atlaskit/spinner';
var LoadingDiv = styled.div.withConfig({
  displayName: "LoadingSpinner__LoadingDiv",
  componentId: "xoee7l-0"
})(["\n  display: flex;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n"]);

var LoadingSpinner =
/*#__PURE__*/
function (_Component) {
  _inherits(LoadingSpinner, _Component);

  function LoadingSpinner() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, LoadingSpinner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoadingSpinner)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "invertSpinner", function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          isSelected = _this$props.isSelected,
          isDisabled = _this$props.isDisabled;
      if (isSelected) return true;else if (isDisabled) return false;else if (appearance === 'primary' || appearance === 'danger' || appearance === 'help') return true;
      return false;
    });

    return _this;
  }

  _createClass(LoadingSpinner, [{
    key: "render",
    value: function render() {
      var spacing = this.props.spacing;
      var spinnerSize = 'medium';

      if (spacing !== 'default') {
        spinnerSize = 'small';
      }

      return React.createElement(LoadingDiv, {
        spacing: this.props.spacing
      }, React.createElement(Spinner, {
        size: spinnerSize,
        invertColor: this.invertSpinner()
      }));
    }
  }]);

  return LoadingSpinner;
}(Component);

export { LoadingSpinner as default };