"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withDeprecationWarnings;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var getComponentName = function getComponentName(target) {
  if (target.displayName && typeof target.displayName === 'string') {
    return target.displayName;
  }

  return target.name || 'Component';
};

var warnIfDeprecatedAppearance = function warnIfDeprecatedAppearance(appearance) {
  var deprecatedAppearances = ['help'];

  if (appearance && deprecatedAppearances.includes(appearance)) {
    // eslint-disable-next-line no-console
    console.warn("Atlaskit: The Button appearance \"".concat(appearance, "\" is deprecated. Please use styled-components' ThemeProvider to provide a custom theme for Button instead."));
  }
};

function withDeprecationWarnings(WrappedComponent) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2.default)(WithDeprecationWarnings, _Component);

    function WithDeprecationWarnings() {
      (0, _classCallCheck2.default)(this, WithDeprecationWarnings);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(WithDeprecationWarnings).apply(this, arguments));
    }

    (0, _createClass2.default)(WithDeprecationWarnings, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        warnIfDeprecatedAppearance(this.props.appearance);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        if (newProps.appearance !== this.props.appearance) {
          warnIfDeprecatedAppearance(newProps.appearance);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(WrappedComponent, this.props);
      }
    }]);
    return WithDeprecationWarnings;
  }(_react.Component), (0, _defineProperty2.default)(_class, "displayName", "WithDeprecationWarnings(".concat(getComponentName(WrappedComponent), ")")), _temp;
}