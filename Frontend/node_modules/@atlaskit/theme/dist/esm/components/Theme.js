import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import { Consumer, Provider } from '../components/Context';

var Theme =
/*#__PURE__*/
function (_Component) {
  _inherits(Theme, _Component);

  function Theme() {
    _classCallCheck(this, Theme);

    return _possibleConstructorReturn(this, _getPrototypeOf(Theme).apply(this, arguments));
  }

  _createClass(Theme, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          theme = _this$props.theme,
          values = _this$props.values;
      return React.createElement(Consumer, null, function (parent) {
        var merged = (values || theme)(parent);
        return typeof children === 'function' ? children(merged) : React.createElement(Provider, {
          value: merged
        }, children);
      });
    }
  }]);

  return Theme;
}(Component);

_defineProperty(Theme, "defaultProps", {
  theme: function theme(v) {
    return v;
  }
});

export { Theme as default };