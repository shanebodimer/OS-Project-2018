"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _theme = require("@atlaskit/theme");

var _page = require("@atlaskit/page");

var _styled = require("./styled");

var semibold = '600';
var regular = '400';

var getMarkerColor = function getMarkerColor(status) {
  switch (status) {
    case 'unvisited':
      return _theme.colors.N70;

    case 'current':
      return _theme.colors.B300;

    case 'visited':
      return _theme.colors.B300;

    case 'disabled':
      return _theme.colors.B300;

    default:
      return null;
  }
};

var getTextColor = function getTextColor(status) {
  switch (status) {
    case 'unvisited':
      return _theme.colors.N300;

    case 'current':
      return _theme.colors.B300;

    case 'visited':
      return _theme.colors.N800;

    case 'disabled':
      return _theme.colors.N70;

    default:
      return null;
  }
};

var getFontWeight = function getFontWeight(status) {
  switch (status) {
    case 'unvisited':
      return regular;

    case 'current':
      return semibold;

    case 'visited':
      return semibold;

    case 'disabled':
      return semibold;

    default:
      return null;
  }
};

var Fade = function Fade(_ref) {
  var children = _ref.children,
      props = (0, _objectWithoutProperties2.default)(_ref, ["children"]);
  return _react.default.createElement(_reactTransitionGroup.CSSTransition, (0, _extends2.default)({}, props, {
    classNames: "fade"
  }), children);
};

var ProgressTrackerStage =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(ProgressTrackerStage, _PureComponent);

  function ProgressTrackerStage(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ProgressTrackerStage);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ProgressTrackerStage).call(this, props));
    _this.state = {
      transitioning: false,
      oldMarkerColor: getMarkerColor(_this.props.item.status),
      oldPercentageComplete: 0
    };
    return _this;
  }

  (0, _createClass2.default)(ProgressTrackerStage, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var newState = this.state;
      newState.transitioning = true;
      this.setState(newState);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps() {
      var newState = this.state;
      newState.transitioning = true;
      this.setState(newState);
    }
  }, {
    key: "shouldShowLink",
    value: function shouldShowLink() {
      return this.props.item.status === 'visited' && !this.props.item.noLink;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          item = _this$props.item,
          render = _this$props.render,
          transitionDelay = _this$props.transitionDelay,
          transitionSpeed = _this$props.transitionSpeed,
          transitionEasing = _this$props.transitionEasing;

      var onEntered = function onEntered() {
        _this2.setState({
          transitioning: false,
          oldMarkerColor: getMarkerColor(item.status),
          oldPercentageComplete: item.percentageComplete
        });
      };

      return _react.default.createElement(_page.GridColumn, {
        medium: 2
      }, _react.default.createElement(_styled.ProgressTrackerStageContainer, null, _react.default.createElement(Fade, {
        appear: true,
        in: this.state.transitioning,
        onEntered: onEntered,
        timeout: transitionDelay + transitionSpeed
      }, _react.default.createElement(_styled.ProgressTrackerStageMarker, {
        oldMarkerColor: this.state.oldMarkerColor,
        color: getMarkerColor(item.status),
        transitionSpeed: transitionSpeed,
        transitionDelay: transitionDelay,
        transitionEasing: transitionEasing
      })), _react.default.createElement(Fade, {
        appear: true,
        in: this.state.transitioning,
        onEntered: onEntered,
        timeout: transitionDelay + transitionSpeed
      }, _react.default.createElement(_styled.ProgressTrackerStageBar, {
        oldPercentageComplete: this.state.oldPercentageComplete,
        percentageComplete: item.percentageComplete,
        transitionSpeed: transitionSpeed,
        transitionDelay: transitionDelay,
        transitionEasing: transitionEasing
      })), _react.default.createElement(Fade, {
        appear: true,
        in: this.state.transitioning,
        onEntered: onEntered,
        timeout: transitionDelay + transitionSpeed
      }, _react.default.createElement(_styled.ProgressTrackerStageTitle, {
        color: getTextColor(item.status),
        fontweight: getFontWeight(item.status),
        transitionSpeed: transitionSpeed,
        transitionDelay: transitionDelay
      }, this.shouldShowLink() ? render.link({
        item: item
      }) : item.label))));
    }
  }]);
  return ProgressTrackerStage;
}(_react.PureComponent);

exports.default = ProgressTrackerStage;