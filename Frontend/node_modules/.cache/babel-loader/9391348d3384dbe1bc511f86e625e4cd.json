{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport objectAssign from 'object-assign';\nimport EnlargedImage from './EnlargedImage';\n\nvar RenderEnlargedImage = function (_Component) {\n  _inherits(RenderEnlargedImage, _Component);\n\n  function RenderEnlargedImage() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, RenderEnlargedImage);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RenderEnlargedImage.__proto__ || Object.getPrototypeOf(RenderEnlargedImage)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isMounted: false\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(RenderEnlargedImage, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setState({\n        isMounted: true\n      });\n\n      if (this.isPortalRendered) {\n        var portalId = this.props.portalId;\n        this.portalElement = document.getElementById(portalId);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!this.isMounted) {\n        return null;\n      }\n\n      var props = this.compositProps;\n\n      if (this.isPortalRendered) {\n        return ReactDOM.createPortal(React.createElement(EnlargedImage, props), this.portalElement);\n      }\n\n      return React.createElement(EnlargedImage, props);\n    }\n  }, {\n    key: 'isPortalIdImplemented',\n    get: function get() {\n      return !!this.props.portalId;\n    }\n  }, {\n    key: 'isPortalRendered',\n    get: function get() {\n      var _props = this.props,\n          isPortalEnabledForTouch = _props.isPortalEnabledForTouch,\n          isTouchDetected = _props.isTouchDetected;\n\n      if (!this.isPortalIdImplemented) {\n        return false;\n      }\n\n      if (!isTouchDetected) {\n        return true;\n      }\n\n      if (isPortalEnabledForTouch) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'isMounted',\n    get: function get() {\n      return this.state.isMounted;\n    }\n  }, {\n    key: 'compositProps',\n    get: function get() {\n      return objectAssign({}, this.props, {\n        isPortalRendered: this.isPortalRendered\n      });\n    }\n  }]);\n\n  return RenderEnlargedImage;\n}(Component);\n\nRenderEnlargedImage.propTypes = {\n  isPortalEnabledForTouch: PropTypes.bool.isRequired,\n  isTouchDetected: PropTypes.bool.isRequired,\n  portalId: PropTypes.string\n};\nexport default RenderEnlargedImage;","map":null,"metadata":{},"sourceType":"module"}