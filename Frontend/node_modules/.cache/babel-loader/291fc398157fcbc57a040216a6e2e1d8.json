{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar DisplayUntilActive = function (_React$Component) {\n  _inherits(DisplayUntilActive, _React$Component);\n\n  function DisplayUntilActive(props) {\n    _classCallCheck(this, DisplayUntilActive);\n\n    var _this = _possibleConstructorReturn(this, (DisplayUntilActive.__proto__ || Object.getPrototypeOf(DisplayUntilActive)).call(this, props));\n\n    _this.hasShown = false;\n    return _this;\n  }\n\n  _createClass(DisplayUntilActive, [{\n    key: 'setHasShown',\n    value: function setHasShown() {\n      this.hasShown = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          isActive = _props.isActive,\n          shouldHideAfterFirstActivation = _props.shouldHideAfterFirstActivation,\n          hasShown = this.hasShown;\n      var shouldShow = !isActive && (!hasShown || !shouldHideAfterFirstActivation);\n\n      if (isActive && !hasShown) {\n        this.setHasShown();\n      }\n\n      return shouldShow ? children : null;\n    }\n  }]);\n\n  return DisplayUntilActive;\n}(React.Component);\n\nDisplayUntilActive.propTypes = {\n  children: PropTypes.element,\n  isActive: PropTypes.bool,\n  shouldHideAfterFirstActivation: PropTypes.bool\n};\nDisplayUntilActive.defaultProps = {\n  shouldHideAfterFirstActivation: true\n};\nexport default DisplayUntilActive;","map":null,"metadata":{},"sourceType":"module"}