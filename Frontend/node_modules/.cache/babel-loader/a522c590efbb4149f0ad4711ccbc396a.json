{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { ThemeProvider } from 'styled-components';\nimport * as colors from '../colors';\nimport { CHANNEL, DEFAULT_THEME_MODE } from '../constants'; // For forward-compat until everything is upgraded.\n\nimport { Provider } from './Context';\n\nfunction getStylesheetResetCSS(state) {\n  var backgroundColor = colors.background(state);\n  return \"\\n    body { background: \".concat(backgroundColor, \"; }\\n  \");\n}\n\nfunction buildThemeState(mode) {\n  return {\n    theme: _defineProperty({}, CHANNEL, {\n      mode: mode\n    })\n  };\n}\n\nvar LegacyReset = styled.div.withConfig({\n  displayName: \"AtlaskitThemeProvider__LegacyReset\",\n  componentId: \"sc-431dkp-0\"\n})([\"\\n  background-color: \", \";\\n  color: \", \";\\n\\n  a {\\n    color: \", \";\\n  }\\n  a:hover {\\n    color: \", \";\\n  }\\n  a:active {\\n    color: \", \";\\n  }\\n  a:focus {\\n    outline-color: \", \";\\n  }\\n  h1 {\\n    color: \", \";\\n  }\\n  h2 {\\n    color: \", \";\\n  }\\n  h3 {\\n    color: \", \";\\n  }\\n  h4 {\\n    color: \", \";\\n  }\\n  h5 {\\n    color: \", \";\\n  }\\n  h6 {\\n    color: \", \";\\n  }\\n  small {\\n    color: \", \";\\n  }\\n\"], colors.background, colors.text, colors.link, colors.linkHover, colors.linkActive, colors.linkOutline, colors.heading, colors.heading, colors.heading, colors.heading, colors.heading, colors.subtleHeading, colors.subtleText);\n\nvar AtlaskitThemeProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AtlaskitThemeProvider, _Component);\n\n  function AtlaskitThemeProvider(props) {\n    var _this;\n\n    _classCallCheck(this, AtlaskitThemeProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AtlaskitThemeProvider).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"stylesheet\", void 0);\n\n    _this.state = buildThemeState(props.mode);\n    return _this;\n  }\n\n  _createClass(AtlaskitThemeProvider, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        hasAtlaskitThemeProvider: true\n      };\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (!this.context.hasAtlaskitThemeProvider) {\n        var css = getStylesheetResetCSS(this.state);\n        this.stylesheet = document.createElement('style');\n        this.stylesheet.type = 'text/css';\n        this.stylesheet.innerHTML = css;\n\n        if (document && document.head) {\n          document.head.appendChild(this.stylesheet);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (newProps.mode !== this.props.mode) {\n        var newThemeState = buildThemeState(newProps.mode);\n\n        if (this.stylesheet) {\n          var css = getStylesheetResetCSS(newThemeState);\n          this.stylesheet.innerHTML = css;\n        }\n\n        this.setState(newThemeState);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.stylesheet && document && document.head) {\n        document.head.removeChild(this.stylesheet);\n        delete this.stylesheet;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      var theme = this.state.theme;\n      return (\n        /* Wrapping the new provider around the old one provides forward\n        compatibility when using the old provider for styled components. This\n        allows us to use components converted to use the new API with consumers\n        using the old provider along side components that may still be using the\n        old theming API. */\n        React.createElement(Provider, {\n          value: {\n            mode: theme[CHANNEL].mode\n          }\n        }, React.createElement(ThemeProvider, {\n          theme: theme\n        }, React.createElement(LegacyReset, null, children)))\n      );\n    }\n  }]);\n\n  return AtlaskitThemeProvider;\n}(Component);\n\n_defineProperty(AtlaskitThemeProvider, \"defaultProps\", {\n  mode: DEFAULT_THEME_MODE\n});\n\n_defineProperty(AtlaskitThemeProvider, \"childContextTypes\", {\n  hasAtlaskitThemeProvider: PropTypes.bool\n});\n\n_defineProperty(AtlaskitThemeProvider, \"contextTypes\", {\n  hasAtlaskitThemeProvider: PropTypes.bool\n});\n\nexport { AtlaskitThemeProvider as default };","map":null,"metadata":{},"sourceType":"module"}