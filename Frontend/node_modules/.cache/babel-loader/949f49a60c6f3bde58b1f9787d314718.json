{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, { Component } from 'react';\nimport FormWrapper from './styled/Form';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"form\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"fields\", {\n      fieldStates: [],\n      validFields: [],\n      invalidFields: [],\n      isInvalid: false,\n      isValidated: false,\n      isSubmitted: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSubmit\", function (event) {\n      if (_this.props.onSubmit) {\n        _this.props.onSubmit(event);\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onValidate\", function (event) {\n      if (_this.props.onValidate) _this.props.onValidate(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initFields\", function () {\n      return {\n        fieldStates: [],\n        validFields: [],\n        invalidFields: [],\n        isInvalid: false,\n        isValidated: false,\n        isSubmitted: false\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getForm\", function () {\n      var name = _this.state.name;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          registerField = _assertThisInitialize.registerField,\n          unregisterField = _assertThisInitialize.unregisterField,\n          getFieldByName = _assertThisInitialize.getFieldByName,\n          setFieldState = _assertThisInitialize.setFieldState,\n          submit = _assertThisInitialize.submit,\n          validate = _assertThisInitialize.validate,\n          reset = _assertThisInitialize.reset,\n          fields = _assertThisInitialize.fields;\n\n      return {\n        name: name,\n        fields: fields,\n        registerField: registerField,\n        unregisterField: unregisterField,\n        getFieldByName: getFieldByName,\n        setFieldState: setFieldState,\n        submit: submit,\n        validate: validate,\n        reset: reset\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"registerField\", function (fieldState) {\n      var prevFields = _objectSpread({}, _this.fields);\n\n      _this.fields = _objectSpread({}, prevFields, {\n        fieldStates: _toConsumableArray(prevFields.fieldStates).concat([fieldState])\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setFieldState\", function (fieldState) {\n      var _this$fields = _this.fields,\n          fieldStates = _this$fields.fieldStates,\n          rest = _objectWithoutProperties(_this$fields, [\"fieldStates\"]);\n\n      var updatedFieldStates = fieldStates.map(function (obj) {\n        return obj.name === fieldState.name ? fieldState : obj;\n      });\n      _this.fields = _objectSpread({}, rest, {\n        fieldStates: updatedFieldStates\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"unregisterField\", function (name) {\n      var _this$fields2 = _this.fields,\n          fieldStates = _this$fields2.fieldStates,\n          rest = _objectWithoutProperties(_this$fields2, [\"fieldStates\"]);\n\n      var fieldState = fieldStates.find(function (field) {\n        return field.name === name;\n      });\n      _this.fields = _objectSpread({}, rest, {\n        fieldStates: fieldStates.splice(fieldStates.indexOf(fieldState))\n      });\n      return fieldState;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getFieldByName\", function (name) {\n      return _this.fields.fieldStates.find(function (fieldState) {\n        return fieldState.name === name;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"submit\", function () {\n      _this.form.submit();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"reset\", function () {\n      _this.form.reset();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"validate\", function () {\n      var fields = _this.getForm().fields; // Reset our validate results\n\n\n      fields.invalidFields = [];\n      fields.validFields = [];\n      fields.isInvalid = false;\n\n      for (var i = 0; i < fields.fieldStates.length; i++) {\n        if (fields.fieldStates[i].validate) {\n          var validatedFieldState = fields.fieldStates[i].validate();\n\n          if (validatedFieldState.isInvalid) {\n            fields.invalidFields.push(fields.fieldStates[i]);\n          } else {\n            fields.validFields.push(fields.fieldStates[i]);\n          }\n\n          fields.isInvalid = !!fields.invalidFields.length;\n          fields.isValidated = true;\n        }\n      } // Update Form validation\n\n\n      return fields;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderHeader\", function () {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderChildren\", function () {\n      return React.Children.map(_this.props.children, function (child) {\n        return React.cloneElement(child, {\n          form: _this.getForm()\n        });\n      });\n    });\n\n    _this.state = {\n      name: _this.props.name,\n      sections: [],\n      header: null,\n      footer: null\n    };\n    return _this;\n  } // Reference to the form in the DOM so we can call submit, reset...\n\n\n  _createClass(Form, [{\n    key: \"componentDidMount\",\n\n    /** Extract Header, Footer & Sections */\n    value: function componentDidMount() {\n      if (this.form) {\n        // $FlowFixMe Only for dev preview. TODO: resolve this type error\n        this.form.addEventListener('submit', this.onSubmit);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.form) {\n        // $FlowFixMe Only for dev preview. TODO: resolve this type error\n        this.form.removeEventListener('submit', this.onSubmit);\n      }\n    } // EVENT HANDLERS\n\n  }, {\n    key: \"render\",\n\n    /** The bulk of the rendering & layout for the forms childrens is done when the component mounts.\n     * We inject references to the form via cloneElement\n     */\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          action = _this$props.action,\n          encType = _this$props.encType,\n          method = _this$props.method,\n          name = _this$props.name,\n          target = _this$props.target,\n          accept = _this$props.accept,\n          acceptCharset = _this$props.acceptCharset,\n          autoComplete = _this$props.autoComplete;\n      return React.createElement(FormWrapper, null, React.createElement(\"form\", {\n        action: action,\n        encType: encType,\n        method: method,\n        name: name,\n        target: target,\n        accept: accept,\n        acceptCharset: acceptCharset,\n        autoComplete: autoComplete // $FlowFixMe Only for dev preview. TODO: resolve this type error\n        ,\n        ref: function ref(form) {\n          _this2.form = form;\n        }\n      }, this.renderChildren()));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\n_defineProperty(Form, \"defaultProps\", {\n  target: '_self'\n});\n\nexport { Form as default };","map":null,"metadata":{},"sourceType":"module"}