{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport { Transition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { SIZES_MAP, DEFAULT_SIZE } from './constants';\nimport Container from './styledContainer';\nimport Svg from './styledSvg';\nvar Outer = styled.div.withConfig({\n  displayName: \"Spinner__Outer\",\n  componentId: \"sc-1ejgacn-0\"\n})([\"\\n  display: inline-block;\\n  vertical-align: middle;\\n\"]);\nOuter.displayName = 'Outer';\n\nvar Spinner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Spinner, _Component);\n\n  function Spinner(props) {\n    var _this;\n\n    _classCallCheck(this, Spinner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spinner).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"transitionNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"enter\", function () {\n      var delay = _this.props.delay;\n\n      if (delay) {\n        _this.setState({\n          phase: 'DELAY'\n        });\n      } else {\n        _this.setState({\n          phase: 'ENTER'\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"idle\", function () {\n      _this.setState({\n        phase: 'IDLE'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"exit\", function () {\n      _this.setState({\n        phase: 'LEAVE'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"endListener\", function (node, done) {\n      var executeCallback = function executeCallback(event) {\n        // ignore animation events on the glyph\n        // $FlowFixMe - tagName does not exist in event.target\n        if (event.target.tagName === 'svg') {\n          return false;\n        }\n\n        if (_this.state.phase === 'DELAY') {\n          _this.setState({\n            phase: 'ENTER'\n          });\n\n          _this.endListener(node, done);\n        } else {\n          done();\n        }\n\n        return node && node.removeEventListener('animationend', executeCallback);\n      };\n\n      return node && node.addEventListener('animationend', executeCallback);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"validateSize\", function () {\n      var size = _this.props.size;\n      var spinnerSize = SIZES_MAP[size] || size;\n      return typeof spinnerSize === 'number' ? spinnerSize : DEFAULT_SIZE;\n    });\n\n    _this.state = {\n      phase: ''\n    };\n    return _this;\n  }\n\n  _createClass(Spinner, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var phase = this.state.phase;\n      var _this$props = this.props,\n          delay = _this$props.delay,\n          invertColor = _this$props.invertColor,\n          isCompleting = _this$props.isCompleting;\n      var size = this.validateSize();\n      var strokeWidth = Math.round(size / 10);\n      var strokeRadius = size / 2 - strokeWidth / 2;\n      return React.createElement(Outer, null, React.createElement(Transition, {\n        addEndListener: this.endListener,\n        appear: true,\n        in: !isCompleting,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onEnter: this.enter,\n        onEntered: this.idle,\n        onExit: this.exit,\n        onExited: function onExited() {\n          return _this2.props.onComplete();\n        },\n        ref: function ref(node) {\n          _this2.transitionNode = node;\n        }\n      }, React.createElement(Container, {\n        delay: delay / 1000,\n        phase: phase,\n        size: size\n      }, React.createElement(Svg, {\n        focusable: \"false\",\n        height: size,\n        invertColor: invertColor,\n        phase: phase,\n        size: size,\n        viewBox: \"0 0 \".concat(size, \" \").concat(size),\n        width: size,\n        xmlns: \"http://www.w3.org/2000/svg\"\n      }, React.createElement(\"circle\", {\n        cx: size / 2,\n        cy: size / 2,\n        r: strokeRadius\n      })))));\n    }\n  }]);\n\n  return Spinner;\n}(Component);\n\n_defineProperty(Spinner, \"defaultProps\", {\n  delay: 100,\n  isCompleting: false,\n  invertColor: false,\n  onComplete: function onComplete() {},\n  size: 'medium'\n});\n\nexport { Spinner as default };","map":null,"metadata":{},"sourceType":"module"}