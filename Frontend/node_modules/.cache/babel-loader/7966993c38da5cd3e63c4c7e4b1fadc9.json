{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React, { Component } from 'react';\nimport { mergeStyles, makeAnimated } from 'react-select';\nimport memoizeOne from 'memoize-one';\nimport isEqual from 'react-fast-compare';\nimport { colors, gridSize } from '@atlaskit/theme';\nimport * as defaultComponents from './components'; // NOTE in the future, `Props` and `defaultProps` should come\n// directly from react-select\n\nfunction baseStyles(validationState, isCompact) {\n  return {\n    control: function control(css, _ref) {\n      var isFocused = _ref.isFocused,\n          isDisabled = _ref.isDisabled;\n      var borderColor = isFocused ? colors.B100 : colors.N20;\n      var backgroundColor = isFocused ? colors.N0 : colors.N20;\n\n      if (isDisabled) {\n        backgroundColor = colors.N20;\n      }\n\n      if (validationState === 'error') borderColor = colors.R400;\n      if (validationState === 'success') borderColor = colors.G400;\n      var borderColorHover = isFocused ? colors.B100 : colors.N30;\n      if (validationState === 'error') borderColorHover = colors.R400;\n      if (validationState === 'success') borderColorHover = colors.G400;\n      var transitionDuration = '200ms';\n      return _objectSpread({}, css, {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderStyle: 'solid',\n        borderRadius: '3px',\n        borderWidth: '2px',\n        boxShadow: 'none',\n        minHeight: isCompact ? gridSize() * 4 : gridSize() * 5,\n        padding: 0,\n        transition: \"background-color \".concat(transitionDuration, \" ease-in-out,\\n        border-color \").concat(transitionDuration, \" ease-in-out\"),\n        '-ms-overflow-style': '-ms-autohiding-scrollbar',\n        '::-webkit-scrollbar': {\n          height: gridSize(),\n          width: gridSize()\n        },\n        '::-webkit-scrollbar-corner': {\n          display: 'none'\n        },\n        ':hover': {\n          '::-webkit-scrollbar-thumb': {\n            backgroundColor: 'rgba(0,0,0,0.2)'\n          },\n          cursor: 'pointer',\n          backgroundColor: isFocused ? colors.N0 : colors.N30,\n          borderColor: borderColorHover\n        },\n        '::-webkit-scrollbar-thumb:hover': {\n          backgroundColor: 'rgba(0,0,0,0.4)'\n        }\n      });\n    },\n    valueContainer: function valueContainer(css) {\n      return _objectSpread({}, css, {\n        paddingBottom: isCompact ? 0 : 2,\n        paddingTop: isCompact ? 0 : 2\n      });\n    },\n    clearIndicator: function clearIndicator(css) {\n      return _objectSpread({}, css, {\n        color: colors.N70,\n        paddingLeft: '2px',\n        paddingRight: '2px',\n        paddingBottom: isCompact ? 0 : 6,\n        paddingTop: isCompact ? 0 : 6,\n        ':hover': {\n          color: colors.N500\n        }\n      });\n    },\n    loadingIndicator: function loadingIndicator(css) {\n      return _objectSpread({}, css, {\n        paddingBottom: isCompact ? 0 : 6,\n        paddingTop: isCompact ? 0 : 6\n      });\n    },\n    dropdownIndicator: function dropdownIndicator(css, _ref2) {\n      var isDisabled = _ref2.isDisabled;\n      var color = colors.N500;\n\n      if (isDisabled) {\n        color = colors.N70;\n      }\n\n      return _objectSpread({}, css, {\n        color: color,\n        paddingBottom: isCompact ? 0 : 6,\n        paddingTop: isCompact ? 0 : 6,\n        paddingLeft: '2px',\n        paddingRight: '2px',\n        ':hover': {\n          color: colors.N200\n        }\n      });\n    },\n    option: function option(css, _ref3) {\n      var isFocused = _ref3.isFocused,\n          isSelected = _ref3.isSelected;\n      var color = isSelected ? colors.N0 : null;\n      var backgroundColor;\n      if (isSelected) backgroundColor = colors.N500;else if (isFocused) backgroundColor = colors.N30;\n      return _objectSpread({}, css, {\n        paddingTop: '6px',\n        paddingBottom: '6px',\n        backgroundColor: backgroundColor,\n        color: color\n      });\n    },\n    placeholder: function placeholder(css) {\n      return _objectSpread({}, css, {\n        color: colors.N100\n      });\n    },\n    singleValue: function singleValue(css, _ref4) {\n      var isDisabled = _ref4.isDisabled;\n      return _objectSpread({}, css, {\n        color: isDisabled ? colors.N70 : colors.N800,\n        lineHeight: \"\".concat(gridSize() * 2, \"px\") // 16px\n\n      });\n    },\n    menuList: function menuList(css) {\n      return _objectSpread({}, css, {\n        paddingTop: gridSize(),\n        paddingBottom: gridSize()\n      });\n    },\n    multiValue: function multiValue(css) {\n      return _objectSpread({}, css, {\n        borderRadius: '2px',\n        backgroundColor: colors.N40,\n        color: colors.N500,\n        maxWidth: '100%'\n      });\n    },\n    multiValueLabel: function multiValueLabel(css) {\n      return _objectSpread({}, css, {\n        padding: '2px',\n        paddingRight: '2px'\n      });\n    },\n    multiValueRemove: function multiValueRemove(css, _ref5) {\n      var isFocused = _ref5.isFocused;\n      return _objectSpread({}, css, {\n        backgroundColor: isFocused && colors.R75,\n        color: isFocused && colors.R400,\n        paddingLeft: '2px',\n        paddingRight: '2px',\n        borderRadius: '0px 2px 2px 0px',\n        ':hover': {\n          color: colors.R400,\n          backgroundColor: colors.R75\n        }\n      });\n    }\n  };\n}\n\nexport default function createSelect(WrappedComponent) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(AtlaskitSelect, _Component);\n\n    function AtlaskitSelect(props) {\n      var _this;\n\n      _classCallCheck(this, AtlaskitSelect);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AtlaskitSelect).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"components\", void 0);\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"select\", void 0);\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"cacheComponents\", function (components) {\n        _this.components = makeAnimated(_objectSpread({}, defaultComponents, components));\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectRef\", function (ref) {\n        _this.select = ref;\n      });\n\n      _this.cacheComponents = memoizeOne(_this.cacheComponents, isEqual).bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n      _this.cacheComponents(props.components);\n\n      return _this;\n    }\n\n    _createClass(AtlaskitSelect, [{\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        this.cacheComponents(nextProps.components);\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.select.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.select.blur();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            styles = _this$props.styles,\n            validationState = _this$props.validationState,\n            spacing = _this$props.spacing,\n            isMulti = _this$props.isMulti,\n            props = _objectWithoutProperties(_this$props, [\"styles\", \"validationState\", \"spacing\", \"isMulti\"]); // eslint-disable-line\n\n\n        var isCompact = !isMulti && spacing === 'compact'; // props must be spread first to stop `components` being overridden\n\n        return React.createElement(WrappedComponent, _extends({\n          ref: this.onSelectRef,\n          isMulti: isMulti\n        }, props, {\n          components: this.components,\n          styles: mergeStyles(baseStyles(validationState, isCompact), styles)\n        }));\n      }\n    }]);\n\n    return AtlaskitSelect;\n  }(Component), _defineProperty(_class, \"defaultProps\", {\n    validationState: 'default',\n    spacing: 'default',\n    onClickPreventDefault: true,\n    tabSelectsValue: false\n  }), _temp;\n}","map":null,"metadata":{},"sourceType":"module"}