{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport { withAnalyticsEvents, withAnalyticsContext, createAndFireEvent } from '@atlaskit/analytics-next';\nimport { name as packageName, version as packageVersion } from '../../package.json';\nimport TabsNavigation from './TabsNavigation';\nimport DefaultTabContent from './TabContent';\nimport DefaultTabItem from './TabItem';\nimport { Tabs as StyledTabs } from '../styled';\n\nvar defaultIsSelectedTestNumber = function defaultIsSelectedTestNumber(selectedIndex, tab, tabIndex) {\n  return selectedIndex === tabIndex;\n};\n\nvar defaultIsSelectedTestObject = function defaultIsSelectedTestObject(selected, tab) {\n  return selected === tab;\n};\n\nvar defaultComponents = {\n  Content: DefaultTabContent,\n  Item: DefaultTabItem\n};\n\nvar Tabs =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tabs, _Component);\n\n  function Tabs(props) {\n    var _this;\n\n    _classCallCheck(this, Tabs);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tabs).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resolveSelected\", function (selected, newProps) {\n      var _ref = newProps || _this.props,\n          tabs = _ref.tabs,\n          isSelectedTest = _ref.isSelectedTest;\n\n      var testFunction = function () {\n        if (isSelectedTest) {\n          return isSelectedTest;\n        }\n\n        if (typeof selected === 'number') {\n          return defaultIsSelectedTestNumber;\n        }\n\n        return defaultIsSelectedTestObject;\n      }();\n\n      return tabs.find(function (tab, tabIndex) {\n        return testFunction(selected, tab, tabIndex);\n      }) || tabs[0];\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelect\", function (newselected, newSelectedIndex) {\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          selected = _this$props.selected;\n\n      if (typeof onSelect === 'function') {\n        onSelect(newselected, newSelectedIndex);\n      }\n\n      if (typeof selected === 'undefined') {\n        _this.setState({\n          selected: newselected\n        });\n      }\n    });\n\n    var initiallyselected = _this.props.selected || _this.props.defaultSelected || _this.props.tabs[0];\n\n    var _selected = _this.resolveSelected(initiallyselected);\n\n    _this.state = {\n      selected: _selected\n    };\n    return _this;\n  }\n\n  _createClass(Tabs, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      if (typeof newProps.selected !== 'undefined' && newProps.selected !== this.state.selected) {\n        var selected = this.resolveSelected(newProps.selected, newProps);\n        this.setState({\n          selected: selected\n        });\n      } else if (newProps.tabs !== this.props.tabs) {\n        var updatedselected = this.resolveSelected(this.state.selected, newProps);\n        this.setState({\n          selected: updatedselected\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          components = _this$props2.components,\n          tabs = _this$props2.tabs;\n      var selected = this.state.selected;\n\n      var _defaultComponents$co = _objectSpread({}, defaultComponents, components),\n          Content = _defaultComponents$co.Content,\n          Item = _defaultComponents$co.Item;\n\n      var contentProps = {\n        data: selected,\n        elementProps: {\n          role: 'tabpanel'\n        }\n      };\n      return React.createElement(StyledTabs, null, React.createElement(TabsNavigation, {\n        component: Item,\n        onSelect: this.onSelect,\n        selected: selected,\n        tabs: tabs\n      }), React.createElement(Content, contentProps));\n    }\n  }]);\n\n  return Tabs;\n}(Component);\n\n_defineProperty(Tabs, \"defaultProps\", {\n  components: {}\n});\n\nexport { Tabs as TabsWithoutAnalytics };\nvar createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');\nexport default withAnalyticsContext({\n  componentName: 'tabs',\n  packageName: packageName,\n  packageVersion: packageVersion\n})(withAnalyticsEvents({\n  onSelect: createAndFireEventOnAtlaskit({\n    action: 'clicked',\n    actionSubject: 'tab',\n    attributes: {\n      componentName: 'tabs',\n      packageName: packageName,\n      packageVersion: packageVersion\n    }\n  })\n})(Tabs));","map":null,"metadata":{},"sourceType":"module"}