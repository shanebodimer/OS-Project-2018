{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport UIAnalyticsEvent from './UIAnalyticsEvent'; // This component is used to grab the analytics functions off context.\n// It uses legacy context, but provides an API similar to 16.3 context.\n// This makes it easier to use with the forward ref API.\n\nvar AnalyticsContextConsumer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AnalyticsContextConsumer, _Component);\n\n  function AnalyticsContextConsumer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AnalyticsContextConsumer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AnalyticsContextConsumer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"createAnalyticsEvent\", function (payload) {\n      var _this$context = _this.context,\n          getAtlaskitAnalyticsEventHandlers = _this$context.getAtlaskitAnalyticsEventHandlers,\n          getAtlaskitAnalyticsContext = _this$context.getAtlaskitAnalyticsContext;\n      var context = typeof getAtlaskitAnalyticsContext === 'function' && getAtlaskitAnalyticsContext() || [];\n      var handlers = typeof getAtlaskitAnalyticsEventHandlers === 'function' && getAtlaskitAnalyticsEventHandlers() || [];\n      return new UIAnalyticsEvent({\n        context: context,\n        handlers: handlers,\n        payload: payload\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(AnalyticsContextConsumer, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.children(this.createAnalyticsEvent);\n    }\n  }]);\n\n  return AnalyticsContextConsumer;\n}(Component); // patch the callback so it provides analytics information.\n\n\n_defineProperty(AnalyticsContextConsumer, \"contextTypes\", {\n  getAtlaskitAnalyticsEventHandlers: PropTypes.func,\n  getAtlaskitAnalyticsContext: PropTypes.func\n});\n\nvar modifyCallbackProp = function modifyCallbackProp(propName, eventMapEntry, props, createAnalyticsEvent) {\n  return function () {\n    var event = typeof eventMapEntry === 'function' ? eventMapEntry(createAnalyticsEvent, props) : createAnalyticsEvent(eventMapEntry);\n    var providedCallback = props[propName];\n\n    if (providedCallback) {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      providedCallback.apply(void 0, args.concat([event]));\n    }\n  };\n}; // helper that provides an easy way to map an object's values\n// ({ string: A }, (string, A) => B) => { string: B }\n\n\nvar vmap = function vmap(obj, fn) {\n  return Object.keys(obj).reduce(function (curr, k) {\n    return _objectSpread({}, curr, _defineProperty({}, k, fn(k, obj[k])));\n  }, {});\n};\n/* This must use $Supertype to work with multiple HOCs - https://github.com/facebook/flow/issues/6057#issuecomment-414157781\n * We also cannot alias this as a generic of withAnalyticsEvents itself as\n * that causes issues with multiple HOCs - https://github.com/facebook/flow/issues/6587\n */\n\n\nexport default function withAnalyticsEvents() {\n  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (WrappedComponent) {\n    // $FlowFixMe - flow 0.67 doesn't know about forwardRef\n    var WithAnalyticsEvents = React.forwardRef(function (props, ref) {\n      return React.createElement(AnalyticsContextConsumer, null, function (createAnalyticsEvent) {\n        var modifiedProps = vmap(createEventMap, function (propName, entry) {\n          return modifyCallbackProp(propName, entry, props, createAnalyticsEvent);\n        });\n        return React.createElement(WrappedComponent, _extends({}, props, modifiedProps, {\n          createAnalyticsEvent: createAnalyticsEvent,\n          ref: ref\n        }));\n      });\n    });\n    WithAnalyticsEvents.displayName = \"WithAnalyticsEvents(\".concat(WrappedComponent.displayName || WrappedComponent.name, \")\");\n    return WithAnalyticsEvents;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}