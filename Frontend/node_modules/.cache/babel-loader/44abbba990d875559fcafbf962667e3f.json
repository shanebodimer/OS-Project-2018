{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { colors, gridSize, typography } from '@atlaskit/theme';\nimport ErrorIcon from '@atlaskit/icon/glyph/error';\nimport SuccessIcon from '@atlaskit/icon/glyph/editor/success';\n/**\n    Displays a Validation Message for a Field, FieldGroup or Section\n*/\n\nvar IconWrapper = styled.span.withConfig({\n  displayName: \"ValidatorMessage__IconWrapper\",\n  componentId: \"sc-1jelslt-0\"\n})([\"\\n  display: inline-block;\\n  vertical-align: text-top;\\n\"]);\n\nvar Error = function Error() {\n  return React.createElement(IconWrapper, null, React.createElement(ErrorIcon, {\n    size: \"small\",\n    role: \"presentation\"\n  }));\n};\n\nvar Success = function Success() {\n  return React.createElement(IconWrapper, null, React.createElement(SuccessIcon, {\n    size: \"small\",\n    role: \"presentation\"\n  }));\n};\n\nvar Message = styled.div.withConfig({\n  displayName: \"ValidatorMessage__Message\",\n  componentId: \"sc-1jelslt-1\"\n})([\"\\n  \", \" font-weight: normal;\\n  color: \", \";\\n  margin-top: \", \"px;\\n\"], typography.h200, function (props) {\n  return props.invalid ? colors.R400 : colors.G400;\n}, gridSize() / 2);\n\nvar ValidatorMessage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ValidatorMessage, _Component);\n\n  function ValidatorMessage() {\n    _classCallCheck(this, ValidatorMessage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ValidatorMessage).apply(this, arguments));\n  }\n\n  _createClass(ValidatorMessage, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          invalidMessage = _this$props.invalidMessage,\n          validMessage = _this$props.validMessage,\n          isInvalid = _this$props.isInvalid; // Validation state is invalid, valid or not validated (null)\n\n      if (isInvalid) {\n        return React.createElement(Message, {\n          invalid: true\n        }, React.createElement(Error, null), invalidMessage); // If the field hasn't been validated yet then isInvalid will be undefined\n      } else if (this.props.isInvalid !== undefined && validMessage && validMessage.length) {\n        return React.createElement(Message, null, React.createElement(Success, null), validMessage);\n      }\n\n      return null;\n    }\n  }]);\n\n  return ValidatorMessage;\n}(Component);\n\n_defineProperty(ValidatorMessage, \"defaultProps\", {\n  invalidMessage: '',\n  validMessage: '',\n  isInvalid: undefined,\n  type: 'field'\n});\n\nexport { ValidatorMessage as default };","map":null,"metadata":{},"sourceType":"module"}