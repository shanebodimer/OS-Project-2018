{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Spinner from '@atlaskit/spinner';\nvar LoadingDiv = styled.div.withConfig({\n  displayName: \"LoadingSpinner__LoadingDiv\",\n  componentId: \"xoee7l-0\"\n})([\"\\n  display: flex;\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n\"]);\n\nvar LoadingSpinner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoadingSpinner);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoadingSpinner)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"invertSpinner\", function () {\n      var _this$props = _this.props,\n          appearance = _this$props.appearance,\n          isSelected = _this$props.isSelected,\n          isDisabled = _this$props.isDisabled;\n      if (isSelected) return true;else if (isDisabled) return false;else if (appearance === 'primary' || appearance === 'danger' || appearance === 'help') return true;\n      return false;\n    });\n\n    return _this;\n  }\n\n  _createClass(LoadingSpinner, [{\n    key: \"render\",\n    value: function render() {\n      var spacing = this.props.spacing;\n      var spinnerSize = 'medium';\n\n      if (spacing !== 'default') {\n        spinnerSize = 'small';\n      }\n\n      return React.createElement(LoadingDiv, {\n        spacing: this.props.spacing\n      }, React.createElement(Spinner, {\n        size: spinnerSize,\n        invertColor: this.invertSpinner()\n      }));\n    }\n  }]);\n\n  return LoadingSpinner;\n}(Component);\n\nexport { LoadingSpinner as default };","map":null,"metadata":{},"sourceType":"module"}