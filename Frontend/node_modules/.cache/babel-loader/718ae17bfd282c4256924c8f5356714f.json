{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport styled, { css, keyframes } from 'styled-components';\nimport { colors, themed } from '@atlaskit/theme';\nimport { SIZES_MAP } from './constants';\n\nvar getStrokeWidth = function getStrokeWidth(size) {\n  return Math.round(size / 10);\n};\n\nvar getStrokeCircumference = function getStrokeCircumference(size) {\n  var strokeWidth = getStrokeWidth(size);\n  var strokeRadius = size / 2 - strokeWidth / 2;\n  return Math.PI * strokeRadius * 2;\n};\n/* Define keyframes statically to prevent a perfomance issue in styled components v1 where the keyframes function\n * does not cache previous values resulting in each spinner injecting the same keyframe definition\n * in the DOM.\n * This can be reverted to dynamic keyframes when we upgrade to styled components v2\n */\n\n\nvar keyframeNames = {\n  noop: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"]),\n  rotate: keyframes([\"\\n    to { transform: rotate(360deg); }\\n  \"]),\n  enterOpacity: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"]),\n  smallEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.small), getStrokeCircumference(SIZES_MAP.small) * 0.8),\n  mediumEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.medium), getStrokeCircumference(SIZES_MAP.medium) * 0.8),\n  largeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.large), getStrokeCircumference(SIZES_MAP.large) * 0.8),\n  xlargeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.xlarge), getStrokeCircumference(SIZES_MAP.xlarge) * 0.8)\n};\n/* If a standard size is used, we can use one of our statically defined keyframes, otherwise\n * we're forced to dynamically create the keyframe and incur a performance cost.\n */\n\nvar getEnterStrokeKeyframe = function getEnterStrokeKeyframe(size) {\n  var standardSizeName = Object.keys(SIZES_MAP).find(function (sizeName) {\n    return size === SIZES_MAP[sizeName];\n  });\n\n  if (standardSizeName) {\n    return keyframeNames[\"\".concat(standardSizeName, \"EnterStroke\")];\n  }\n\n  var circumference = getStrokeCircumference(size);\n  return keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], circumference, circumference * 0.8);\n};\n\nvar spinnerColor = themed({\n  light: colors.N500,\n  dark: colors.N0\n});\nvar spinnerColorInverted = themed({\n  light: colors.N0,\n  dark: colors.N0\n});\nexport var getStrokeColor = function getStrokeColor(_ref // $FlowFixMe - theme is not found in props\n) {\n  var invertColor = _ref.invertColor,\n      props = _objectWithoutProperties(_ref, [\"invertColor\"]);\n\n  return invertColor ? spinnerColorInverted(props) : spinnerColor(props);\n};\nexport var svgStyles = css([\"\\n  \", \";\\n\"], function (props) {\n  var circumference = getStrokeCircumference(props.size);\n  var idleRotation = \"0.86s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite \".concat(keyframeNames.rotate);\n  var spinUpStroke = \"0.8s ease-in-out \".concat(getEnterStrokeKeyframe(props.size));\n  var spinUpOpacity = \"0.2s ease-in-out \".concat(keyframeNames.enterOpacity);\n  var activeAnimations = [idleRotation];\n\n  if (props.phase === 'ENTER') {\n    activeAnimations.push(spinUpStroke, spinUpOpacity);\n  }\n\n  return css([\"\\n      animation: \", \";\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"], activeAnimations.join(', '), getStrokeColor, circumference, circumference * 0.8, getStrokeWidth(props.size));\n});\nvar Svg = styled.svg.withConfig({\n  displayName: \"styledSvg__Svg\",\n  componentId: \"y2l69q-0\"\n})([\"\\n  \", \";\\n\"], svgStyles);\nSvg.displayName = 'SpinnerSvg';\nexport default Svg;","map":null,"metadata":{},"sourceType":"module"}