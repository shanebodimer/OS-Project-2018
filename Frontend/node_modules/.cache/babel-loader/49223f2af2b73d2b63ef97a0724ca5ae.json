{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport AnalyticsEvent from './AnalyticsEvent';\nvar _console = console,\n    warn = _console.warn;\n\nvar UIAnalyticsEvent =\n/*#__PURE__*/\nfunction (_AnalyticsEvent) {\n  _inherits(UIAnalyticsEvent, _AnalyticsEvent);\n\n  function UIAnalyticsEvent(props) {\n    var _this;\n\n    _classCallCheck(this, UIAnalyticsEvent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UIAnalyticsEvent).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"context\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlers\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"hasFired\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"clone\", function () {\n      if (_this.hasFired) {\n        warn(\"Cannot clone an event after it's been fired.\");\n        return null;\n      }\n\n      var context = _toConsumableArray(_this.context);\n\n      var handlers = _toConsumableArray(_this.handlers); // We stringify and parse here to get a hacky \"deep clone\" of the object.\n      // This has some limitations in that it wont support functions, regexs, Maps, Sets, etc,\n      // but none of those need to be represented in our payload, so we consider this fine\n\n\n      var payload = JSON.parse(JSON.stringify(_this.payload));\n      return new UIAnalyticsEvent({\n        context: context,\n        handlers: handlers,\n        payload: payload\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"fire\", function (channel) {\n      if (_this.hasFired) {\n        warn('Cannot fire an event twice.');\n        return;\n      }\n\n      _this.handlers.forEach(function (handler) {\n        handler(_assertThisInitialized(_assertThisInitialized(_this)), channel);\n      });\n\n      _this.hasFired = true;\n    });\n\n    _this.context = props.context || [];\n    _this.handlers = props.handlers || [];\n    _this.hasFired = false;\n    return _this;\n  }\n\n  _createClass(UIAnalyticsEvent, [{\n    key: \"update\",\n    value: function update(updater) {\n      if (this.hasFired) {\n        warn(\"Cannot update an event after it's been fired.\");\n        return this;\n      }\n\n      return _get(_getPrototypeOf(UIAnalyticsEvent.prototype), \"update\", this).call(this, updater);\n    }\n  }]);\n\n  return UIAnalyticsEvent;\n}(AnalyticsEvent);\n\nexport { UIAnalyticsEvent as default };","map":null,"metadata":{},"sourceType":"module"}