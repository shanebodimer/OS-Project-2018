{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { css as _css2 } from \"emotion\";\nimport { css as _css } from \"emotion\";\nimport React from 'react';\nimport { groupedCountries } from './data/countries';\nimport Select from './Select'; // flow stuff\n// custom option renderer\n\nvar labelCSS = function labelCSS() {\n  return {\n    alignItems: 'center',\n    display: 'flex',\n    lineHeight: 1.2\n  };\n};\n\nvar flagCSS = function flagCSS() {\n  return {\n    fontSize: '18px',\n    marginRight: '8px'\n  };\n};\n\nvar Opt = function Opt(_ref) {\n  var children = _ref.children,\n      icon = _ref.icon;\n  return React.createElement(\"div\", {\n    className: _css(labelCSS())\n  }, React.createElement(\"span\", {\n    className: _css2(flagCSS())\n  }, icon), children);\n}; // return the country name; used for searching\n\n\nvar getOptionLabel = function getOptionLabel(opt) {\n  return opt.name;\n}; // set the country's abbreviation for the option value, (also searchable)\n\n\nvar getOptionValue = function getOptionValue(opt) {\n  return opt.abbr;\n}; // the text node of the control\n\n\nvar controlLabel = function controlLabel(opt) {\n  return React.createElement(Opt, {\n    icon: opt.icon\n  }, opt.abbr.toUpperCase());\n}; // the text node for an option\n\n\nvar optionLabel = function optionLabel(_ref2) {\n  var abbr = _ref2.abbr,\n      code = _ref2.code,\n      icon = _ref2.icon,\n      name = _ref2.name;\n  return React.createElement(Opt, {\n    icon: icon\n  }, name, \" (\", abbr.toUpperCase(), \") +\", code);\n}; // switch formatters based on render context (menu | value)\n\n\nvar formatOptionLabel = function formatOptionLabel(opt, _ref3) {\n  var context = _ref3.context;\n  return context === 'value' ? controlLabel(opt) : optionLabel(opt);\n}; // put it all together\n\n\nvar CountrySelect = function CountrySelect(props) {\n  return React.createElement(Select, _extends({\n    isClearable: false,\n    formatOptionLabel: formatOptionLabel,\n    getOptionLabel: getOptionLabel,\n    getOptionValue: getOptionValue,\n    isMulti: false,\n    options: groupedCountries,\n    styles: {\n      container: function container(css) {\n        return _objectSpread({}, css, {\n          width: 105\n        });\n      },\n      dropdownIndicator: function dropdownIndicator(css) {\n        return _objectSpread({}, css, {\n          paddingLeft: 0\n        });\n      },\n      menu: function menu(css) {\n        return _objectSpread({}, css, {\n          width: 300\n        });\n      }\n    }\n  }, props));\n};\n\nexport default CountrySelect;","map":null,"metadata":{},"sourceType":"module"}