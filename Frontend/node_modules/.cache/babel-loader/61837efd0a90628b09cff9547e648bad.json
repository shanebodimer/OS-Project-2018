{"ast":null,"code":"import { css } from 'styled-components';\nimport { borderRadius, fontSize, gridSize, math } from '@atlaskit/theme';\nimport themeDefinitions from './themeDefinitions';\nimport { themeNamespace } from '../theme';\n\nvar getProvidedTheme = function getProvidedTheme(_ref) {\n  var theme = _ref.theme;\n  return theme && theme[themeNamespace] || {};\n};\n\nvar getAppearanceProperty = function getAppearanceProperty(property, appearance, providedTheme, inBuiltTheme) {\n  var providedAppearanceStyles = providedTheme[appearance];\n  var inBuiltAppearanceStyles = inBuiltTheme[appearance];\n  var defaultAppearanceStyles = inBuiltTheme.default;\n  return providedAppearanceStyles && providedAppearanceStyles[property] || inBuiltAppearanceStyles && inBuiltAppearanceStyles[property] || defaultAppearanceStyles[property];\n};\n\nvar getState = function getState(_ref2) {\n  var disabled = _ref2.disabled,\n      isActive = _ref2.isActive,\n      isFocus = _ref2.isFocus,\n      isHover = _ref2.isHover,\n      isSelected = _ref2.isSelected;\n  if (disabled) return 'disabled';\n  if (isSelected && isFocus) return 'focusSelected';\n  if (isSelected) return 'selected';\n  if (isActive) return 'active';\n  if (isHover) return 'hover';\n  if (isFocus) return 'focus';\n  return 'default';\n};\n\nexport var getPropertyAppearance = function getPropertyAppearance(property) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var definitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : themeDefinitions;\n  var appearance = props.appearance;\n  var fallbacks = definitions.fallbacks,\n      inBuiltTheme = definitions.theme;\n  var providedTheme = getProvidedTheme(props);\n  var propertyStyles = getAppearanceProperty(property, appearance, providedTheme, inBuiltTheme);\n\n  if (!propertyStyles) {\n    return fallbacks[property] || 'initial';\n  }\n\n  var state = getState(props);\n  return propertyStyles[state] || propertyStyles.default || fallbacks[property];\n};\nexport default function getButtonStyles(props) {\n  // $FlowFixMe - should be fixed when theme work is done\n  var baseSize = fontSize(props);\n  var buttonHeight = \"\".concat(math.divide(math.multiply(gridSize, 4), baseSize)(props), \"em\");\n  var compactButtonHeight = \"\".concat(math.divide(math.multiply(gridSize, 3), baseSize)(props), \"em\");\n  /**\n   * Variable styles\n   */\n\n  var cursor = 'default';\n  var height = buttonHeight;\n  var lineHeight = buttonHeight;\n  var outline = 'none'; // $FlowFixMe - should be fixed when theme work is done\n\n  var padding = \"0 \".concat(gridSize(props), \"px\");\n  var transitionDuration = '0.1s, 0.15s';\n  var transition = 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)';\n  var verticalAlign = 'middle';\n  var width = 'auto';\n  /**\n   * Appearance + Theme styles\n   */\n\n  var background = getPropertyAppearance('background', props);\n  var color = getPropertyAppearance('color', props);\n  var boxShadowColor = getPropertyAppearance('boxShadowColor', props);\n  var boxShadow = boxShadowColor ? css([\"\\n        box-shadow: 0 0 0 2px \", \";\\n      \"], boxShadowColor) : null;\n  var textDecoration = getPropertyAppearance('textDecoration', props); // Spacing: Compact\n\n  if (props.spacing === 'compact') {\n    height = compactButtonHeight;\n    lineHeight = compactButtonHeight;\n  } // Spacing: None\n\n\n  if (props.spacing === 'none') {\n    height = 'auto';\n    lineHeight = 'inherit';\n    padding = '0';\n    verticalAlign = 'baseline';\n  } // Interaction: Hover\n\n\n  if (props.isHover) {\n    cursor = 'pointer';\n    transition = 'background 0s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)';\n  } // Interaction: Active\n\n\n  if (props.isActive) {\n    transitionDuration = '0s';\n  } // Interaction: Focus\n\n\n  if (props.isFocus) {\n    outline = 'none';\n    transitionDuration = '0s, 0.2s';\n  } // Disabled\n\n\n  if (props.disabled) {\n    cursor = 'not-allowed';\n  } // Loading\n\n\n  var isLoadingStyles = function isLoadingStyles(p) {\n    return p.isLoading ? 'pointer-events: none;' : null;\n  }; // Fit to parent width\n\n\n  if (props.fit) {\n    width = '100%';\n  }\n  /* Note use of !important to override the ThemeReset on anchor tag styles */\n\n\n  return css([\"\\n    align-items: baseline;\\n    background: \", \";\\n    border-radius: \", \"px;\\n    border-width: 0;\\n    box-sizing: border-box;\\n    color: \", \" !important;\\n    cursor: \", \";\\n    display: inline-flex;\\n    font-size: inherit;\\n    font-style: normal;\\n    height: \", \";\\n    line-height: \", \";\\n    margin: 0;\\n    max-width: 100%;\\n    outline: \", \" !important;\\n    padding: \", \";\\n    text-align: center;\\n    text-decoration: \", \";\\n    transition: \", \";\\n    transition-duration: \", \";\\n    vertical-align: \", \";\\n    white-space: nowrap;\\n    width: \", \";\\n    \", \" &::-moz-focus-inner {\\n      border: 0;\\n      margin: 0;\\n      padding: 0;\\n    }\\n    \", \";\\n  \"], background, borderRadius, color, cursor, height, lineHeight, outline, padding, textDecoration, transition, transitionDuration, verticalAlign, width, boxShadow, isLoadingStyles);\n}","map":null,"metadata":{},"sourceType":"module"}