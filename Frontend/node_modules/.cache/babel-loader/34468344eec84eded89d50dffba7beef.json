{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ElementRelativeCursorPosition = function () {\n  function ElementRelativeCursorPosition(el) {\n    _classCallCheck(this, ElementRelativeCursorPosition);\n\n    this.el = el;\n  }\n\n  _createClass(ElementRelativeCursorPosition, [{\n    key: \"getDocumentRelativeElementOffset\",\n    value: function getDocumentRelativeElementOffset(el) {\n      var rootEl = this.getRootOfEl(el);\n\n      var _rootEl$getBoundingCl = rootEl.getBoundingClientRect(),\n          docLeft = _rootEl$getBoundingCl.left,\n          docTop = _rootEl$getBoundingCl.top;\n\n      var _el$getBoundingClient = el.getBoundingClientRect(),\n          elLeft = _el$getBoundingClient.left,\n          elTop = _el$getBoundingClient.top;\n\n      return {\n        x: Math.abs(docLeft) + elLeft,\n        y: Math.abs(docTop) + elTop\n      };\n    }\n  }, {\n    key: \"getRootOfEl\",\n    value: function getRootOfEl(el) {\n      if (el.parentElement) {\n        return this.getRootOfEl(el.parentElement);\n      }\n\n      return el;\n    }\n  }, {\n    key: \"getComputedElementRelativeCursorPosition\",\n    value: function getComputedElementRelativeCursorPosition(event, documentRelativeElementOffset) {\n      this.lastEvent = event;\n      var position = this.getDocumentRelativeCursorPosition(event);\n      var cursorX = position.x,\n          cursorY = position.y;\n      var offsetX = documentRelativeElementOffset.x,\n          offsetY = documentRelativeElementOffset.y;\n      return {\n        x: Math.round(cursorX - offsetX),\n        y: Math.round(cursorY - offsetY)\n      };\n    }\n  }, {\n    key: \"getDocumentRelativeCursorPosition\",\n    value: function getDocumentRelativeCursorPosition(event) {\n      return {\n        x: event.pageX,\n        y: event.pageY\n      };\n    }\n  }, {\n    key: \"getCursorPosition\",\n    value: function getCursorPosition(event) {\n      return this.getComputedElementRelativeCursorPosition(event, this.documentRelativeElementOffset);\n    }\n  }, {\n    key: \"documentRelativeElementOffset\",\n    get: function get() {\n      if (!this.elementOffset) {\n        this.elementOffset = this.getDocumentRelativeElementOffset(this.el);\n      }\n\n      return this.elementOffset;\n    }\n  }]);\n\n  return ElementRelativeCursorPosition;\n}();\n\nexport default ElementRelativeCursorPosition;","map":null,"metadata":{},"sourceType":"module"}