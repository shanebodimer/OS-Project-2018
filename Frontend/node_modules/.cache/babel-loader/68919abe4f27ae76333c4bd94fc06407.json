{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport objectAssign from 'object-assign';\nimport LensPropTypes from '../../prop-types/Lens';\nimport clamp from 'clamp';\nimport dataUri from './assets/textured-lens-data-uri';\n\nvar PositiveSpaceLens = function (_Component) {\n  _inherits(PositiveSpaceLens, _Component);\n\n  function PositiveSpaceLens() {\n    _classCallCheck(this, PositiveSpaceLens);\n\n    return _possibleConstructorReturn(this, (PositiveSpaceLens.__proto__ || Object.getPrototypeOf(PositiveSpaceLens)).apply(this, arguments));\n  }\n\n  _createClass(PositiveSpaceLens, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        style: this.compositStyle\n      });\n    }\n  }, {\n    key: 'dimensions',\n    get: function get() {\n      var _props$cursorOffset = this.props.cursorOffset,\n          cursorOffsetX = _props$cursorOffset.x,\n          cursorOffsetY = _props$cursorOffset.y;\n      return {\n        width: cursorOffsetX * 2,\n        height: cursorOffsetY * 2\n      };\n    }\n  }, {\n    key: 'positionOffset',\n    get: function get() {\n      var _props = this.props,\n          _props$cursorOffset2 = _props.cursorOffset,\n          cursorOffsetX = _props$cursorOffset2.x,\n          cursorOffsetY = _props$cursorOffset2.y,\n          _props$position = _props.position,\n          positionX = _props$position.x,\n          positionY = _props$position.y,\n          _props$smallImage = _props.smallImage,\n          imageHeight = _props$smallImage.height,\n          imageWidth = _props$smallImage.width;\n      var _dimensions = this.dimensions,\n          width = _dimensions.width,\n          height = _dimensions.height;\n      var top = positionY - cursorOffsetY;\n      var left = positionX - cursorOffsetX;\n      var maxTop = imageHeight - height;\n      var maxLeft = imageWidth - width;\n      var minOffset = 0;\n      return {\n        top: clamp(top, minOffset, maxTop),\n        left: clamp(left, minOffset, maxLeft)\n      };\n    }\n  }, {\n    key: 'defaultStyle',\n    get: function get() {\n      var fadeDurationInMs = this.props.fadeDurationInMs;\n      return {\n        transition: 'opacity ' + fadeDurationInMs + 'ms ease-in',\n        backgroundImage: 'url(' + dataUri + ')'\n      };\n    }\n  }, {\n    key: 'userSpecifiedStyle',\n    get: function get() {\n      var style = this.props.style;\n      return style;\n    }\n  }, {\n    key: 'isVisible',\n    get: function get() {\n      var _props2 = this.props,\n          isActive = _props2.isActive,\n          isPositionOutside = _props2.isPositionOutside;\n      return isActive && !isPositionOutside;\n    }\n  }, {\n    key: 'priorityStyle',\n    get: function get() {\n      var _dimensions2 = this.dimensions,\n          width = _dimensions2.width,\n          height = _dimensions2.height;\n      var _positionOffset = this.positionOffset,\n          top = _positionOffset.top,\n          left = _positionOffset.left;\n      return {\n        position: 'absolute',\n        top: top + 'px',\n        left: left + 'px',\n        width: width + 'px',\n        height: height + 'px',\n        opacity: this.isVisible ? 1 : 0\n      };\n    }\n  }, {\n    key: 'compositStyle',\n    get: function get() {\n      return objectAssign(this.defaultStyle, this.userSpecifiedStyle, this.priorityStyle);\n    }\n  }]);\n\n  return PositiveSpaceLens;\n}(Component);\n\nPositiveSpaceLens.propTypes = LensPropTypes;\nPositiveSpaceLens.defaultProps = {\n  style: {}\n};\nexport default PositiveSpaceLens;","map":null,"metadata":{},"sourceType":"module"}