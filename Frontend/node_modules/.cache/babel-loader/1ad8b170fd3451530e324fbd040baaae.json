{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/* eslint-disable no-console */\n// While in dev preview console.info will be used\n\n/* eslint-disable react/no-unused-prop-types */\n\nimport { PureComponent } from 'react';\n/**\n * Result that is returned by any Validator\n */\n\nvar Validator =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Validator, _PureComponent);\n\n  function Validator() {\n    _classCallCheck(this, Validator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Validator).apply(this, arguments));\n  }\n\n  _createClass(Validator, [{\n    key: \"render\",\n\n    /** Valiate a value using the function & options passed in as props  */\n\n    /*validate = (value:string) => {\n      let valid:boolean = this.props.func(value, this.props.options);\n      // Invert result if validOn prop is false\n      //if(!this.props.validOn && !valid) valid = true;\n      return {\n          valid,\n          message: (valid)? this.props.valid : this.props.invalid\n      }\n    };\n    */\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Validator;\n}(PureComponent);\n\n_defineProperty(Validator, \"defaultProps\", {\n  func: {},\n  validOnFalse: false,\n  valid: '',\n  invalid: ''\n});\n\nexport { Validator as default };","map":null,"metadata":{},"sourceType":"module"}