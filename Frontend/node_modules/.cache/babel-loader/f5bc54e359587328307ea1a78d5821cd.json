{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { css as _css2 } from \"emotion\";\nimport { css as _css } from \"emotion\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { Component } from 'react';\nimport { components } from 'react-select';\nimport RadioIcon from '@atlaskit/icon/glyph/radio';\nimport CheckboxIcon from '@atlaskit/icon/glyph/checkbox';\nimport { colors, themed, gridSize } from '@atlaskit/theme'; // maintains function shape\n\nvar backgroundColor = themed({\n  light: colors.N40A,\n  dark: colors.DN10\n});\nvar transparent = themed({\n  light: 'transparent',\n  dark: 'transparent'\n}); // state of the parent option\n// the primary color represents the outer or background element\n\nvar getPrimaryColor = function getPrimaryColor(_ref) {\n  var isActive = _ref.isActive,\n      isDisabled = _ref.isDisabled,\n      isFocused = _ref.isFocused,\n      isSelected = _ref.isSelected,\n      rest = _objectWithoutProperties(_ref, [\"isActive\", \"isDisabled\", \"isFocused\", \"isSelected\"]);\n\n  var color = backgroundColor;\n\n  if (isDisabled && isSelected) {\n    color = themed({\n      light: colors.B75,\n      dark: colors.DN200\n    });\n  } else if (isDisabled) {\n    color = themed({\n      light: colors.N20A,\n      dark: colors.DN10\n    });\n  } else if (isActive) {\n    color = themed({\n      light: colors.B75,\n      dark: colors.B200\n    });\n  } else if (isFocused && isSelected) {\n    color = themed({\n      light: colors.B300,\n      dark: colors.B75\n    });\n  } else if (isFocused) {\n    color = themed({\n      light: colors.N50A,\n      dark: colors.DN30\n    });\n  } else if (isSelected) {\n    color = colors.blue;\n  } // $FlowFixMe - theme is not found in props\n\n\n  return color(rest);\n}; // the secondary color represents the radio dot or checkmark\n\n\nvar getSecondaryColor = function getSecondaryColor(_ref2) {\n  var isActive = _ref2.isActive,\n      isDisabled = _ref2.isDisabled,\n      isSelected = _ref2.isSelected,\n      rest = _objectWithoutProperties(_ref2, [\"isActive\", \"isDisabled\", \"isSelected\"]);\n\n  var color = themed({\n    light: colors.N0,\n    dark: colors.DN10\n  });\n\n  if (isDisabled && isSelected) {\n    color = themed({\n      light: colors.N70,\n      dark: colors.DN10\n    });\n  } else if (isActive && isSelected && !isDisabled) {\n    color = themed({\n      light: colors.B400,\n      dark: colors.DN10\n    });\n  } else if (!isSelected) {\n    color = transparent;\n  } // $FlowFixMe - theme is not found in props\n\n\n  return color(rest);\n};\n\nvar ControlOption =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlOption, _Component);\n\n  function ControlOption() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlOption);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlOption)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isActive: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseDown\", function () {\n      return _this.setState({\n        isActive: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseUp\", function () {\n      return _this.setState({\n        isActive: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseLeave\", function () {\n      return _this.setState({\n        isActive: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ControlOption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          getStyles = _this$props.getStyles,\n          Icon = _this$props.Icon,\n          isDisabled = _this$props.isDisabled,\n          isFocused = _this$props.isFocused,\n          isSelected = _this$props.isSelected,\n          children = _this$props.children,\n          innerProps = _this$props.innerProps,\n          rest = _objectWithoutProperties(_this$props, [\"getStyles\", \"Icon\", \"isDisabled\", \"isFocused\", \"isSelected\", \"children\", \"innerProps\"]);\n\n      var isActive = this.state.isActive; // styles\n\n      var bg = 'transparent';\n      if (isFocused) bg = colors.N20;\n      if (isActive) bg = colors.B50;\n      var style = {\n        alignItems: 'center',\n        backgroundColor: bg,\n        color: 'inherit',\n        display: 'flex '\n      }; // prop assignment\n\n      var props = _objectSpread({}, innerProps, {\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        onMouseLeave: this.onMouseLeave,\n        style: style\n      });\n\n      return React.createElement(components.Option, _extends({}, rest, {\n        isDisabled: isDisabled,\n        isFocused: isFocused,\n        isSelected: isSelected,\n        getStyles: getStyles,\n        innerProps: props\n      }), React.createElement(\"div\", {\n        className: _css(iconWrapperCSS())\n      }, React.createElement(Icon, {\n        primaryColor: getPrimaryColor(_objectSpread({}, this.props, this.state)),\n        secondaryColor: getSecondaryColor(_objectSpread({}, this.props, this.state))\n      })), React.createElement(\"div\", {\n        className: _css2(truncateCSS())\n      }, children));\n    }\n  }]);\n\n  return ControlOption;\n}(Component);\n\nvar iconWrapperCSS = function iconWrapperCSS() {\n  return {\n    alignItems: 'center',\n    display: 'flex ',\n    'flex-shrink': 0,\n    paddingRight: '4px'\n  };\n};\n/* TODO:\n  to be removed\n  the label of an option in the menu\n  should ideally be something we can customise\n  as part of the react-select component API\n  at the moment we are hardcoding it into\n  the custom input-option components for Radio and Checkbox Select\n  and so this behaviour is not customisable / disableable\n  by users who buy into radio / checkbox select.\n*/\n\n\nvar truncateCSS = function truncateCSS() {\n  return {\n    textOverflow: 'ellipsis',\n    'overflow-x': 'hidden',\n    'flex-grow': 1,\n    whiteSpace: 'nowrap'\n  };\n};\n\nexport var inputOptionStyles = function inputOptionStyles(css, _ref3) {\n  var isFocused = _ref3.isFocused;\n  return _objectSpread({}, css, {\n    backgroundColor: isFocused ? colors.N30 : 'transparent',\n    color: 'inherit',\n    cursor: 'pointer',\n    paddingLeft: \"\".concat(gridSize() * 2, \"px\"),\n    paddingTop: '4px',\n    paddingBottom: '4px',\n    ':active': {\n      backgroundColor: colors.B50\n    }\n  });\n};\nexport var CheckboxOption = function CheckboxOption(props) {\n  return React.createElement(ControlOption, _extends({\n    Icon: CheckboxIcon\n  }, props));\n};\nexport var RadioOption = function RadioOption(props) {\n  return React.createElement(ControlOption, _extends({\n    Icon: RadioIcon\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}