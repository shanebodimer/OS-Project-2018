{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport detectIt from 'detect-it';\nimport objectAssign from 'object-assign';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactCursorPosition from 'react-cursor-position';\nimport RenderEnlargedImage from './RenderEnlargedImage';\nimport NegativeSpaceLens from './lens/negative-space';\nimport PositiveSpaceLens from './lens/positive-space';\nimport DisplayUntilActive from './hint/DisplayUntilActive';\nimport Hint from './hint/DefaultHint';\nimport { getLensCursorOffset } from './lib/lens';\nimport { getEnlargedImageContainerDimension } from './lib/dimensions';\nimport { getContainerStyle, getSmallImageStyle } from './lib/styles';\nimport { LargeImageShape, SmallImageShape } from './prop-types/Image';\nimport { EnlargedImagePosition, EnlargedImageContainerDimensions } from './prop-types/EnlargedImage';\nimport { noop } from './utils';\nimport { INPUT_TYPE, ENLARGED_IMAGE_POSITION } from './constants';\n\nvar ReactImageMagnify = function (_React$Component) {\n  _inherits(ReactImageMagnify, _React$Component);\n\n  function ReactImageMagnify(props) {\n    _classCallCheck(this, ReactImageMagnify);\n\n    var _this = _possibleConstructorReturn(this, (ReactImageMagnify.__proto__ || Object.getPrototypeOf(ReactImageMagnify)).call(this, props));\n\n    var primaryInput = detectIt.primaryInput;\n    var MOUSE = INPUT_TYPE.mouse,\n        TOUCH = INPUT_TYPE.touch;\n    _this.state = {\n      smallImageWidth: 0,\n      smallImageHeight: 0,\n      detectedInputType: {\n        isMouseDeteced: primaryInput === MOUSE,\n        isTouchDetected: primaryInput === TOUCH\n      }\n    };\n    _this.onSmallImageLoad = _this.onSmallImageLoad.bind(_this);\n    _this.setSmallImageDimensionState = _this.setSmallImageDimensionState.bind(_this);\n    _this.onDetectedInputTypeChanged = _this.onDetectedInputTypeChanged.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactImageMagnify, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var isFluidWidth = this.props.smallImage.isFluidWidth;\n\n      if (!isFluidWidth) {\n        return;\n      }\n\n      this.setSmallImageDimensionState();\n      window.addEventListener('resize', this.setSmallImageDimensionState);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.setSmallImageDimensionState);\n    }\n  }, {\n    key: 'onSmallImageLoad',\n    value: function onSmallImageLoad(e) {\n      var _props$smallImage = this.props.smallImage,\n          _props$smallImage$onL = _props$smallImage.onLoad,\n          onLoad = _props$smallImage$onL === undefined ? noop : _props$smallImage$onL,\n          isFluidWidth = _props$smallImage.isFluidWidth;\n      onLoad(e);\n\n      if (!isFluidWidth) {\n        return;\n      }\n\n      this.setSmallImageDimensionState();\n    }\n  }, {\n    key: 'onDetectedInputTypeChanged',\n    value: function onDetectedInputTypeChanged(detectedInputType) {\n      this.setState({\n        detectedInputType: detectedInputType\n      });\n    }\n  }, {\n    key: 'setSmallImageDimensionState',\n    value: function setSmallImageDimensionState() {\n      var _smallImageEl = this.smallImageEl,\n          smallImageWidth = _smallImageEl.offsetWidth,\n          smallImageHeight = _smallImageEl.offsetHeight;\n      this.setState({\n        smallImageWidth: smallImageWidth,\n        smallImageHeight: smallImageHeight\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          style = _props.style,\n          hoverDelayInMs = _props.hoverDelayInMs,\n          hoverOffDelayInMs = _props.hoverOffDelayInMs,\n          isActivatedOnTouch = _props.isActivatedOnTouch,\n          pressDuration = _props.pressDuration,\n          pressMoveThreshold = _props.pressMoveThreshold,\n          _props$smallImage$onE = _props.smallImage.onError,\n          onError = _props$smallImage$onE === undefined ? noop : _props$smallImage$onE,\n          imageClassName = _props.imageClassName,\n          imageStyle = _props.imageStyle,\n          lensStyle = _props.lensStyle,\n          largeImage = _props.largeImage,\n          enlargedImageContainerClassName = _props.enlargedImageContainerClassName,\n          enlargedImageContainerStyle = _props.enlargedImageContainerStyle,\n          enlargedImageClassName = _props.enlargedImageClassName,\n          enlargedImageStyle = _props.enlargedImageStyle,\n          enlargedImagePortalId = _props.enlargedImagePortalId,\n          isEnlargedImagePortalEnabledForTouch = _props.isEnlargedImagePortalEnabledForTouch,\n          fadeDurationInMs = _props.fadeDurationInMs,\n          HintComponent = _props.hintComponent,\n          isHintEnabled = _props.isHintEnabled,\n          hintTextMouse = _props.hintTextMouse,\n          hintTextTouch = _props.hintTextTouch,\n          shouldHideHintAfterFirstActivation = _props.shouldHideHintAfterFirstActivation;\n      var smallImage = this.smallImage;\n      var isTouchDetected = this.state.detectedInputType.isTouchDetected;\n      var cursorOffset = getLensCursorOffset(smallImage, largeImage, this.enlargedImageContainerDimensions);\n      var Lens = this.lensComponent;\n      return React.createElement(ReactCursorPosition, {\n        className: className,\n        hoverDelayInMs: hoverDelayInMs,\n        hoverOffDelayInMs: hoverOffDelayInMs,\n        isActivatedOnTouch: isActivatedOnTouch,\n        onDetectedInputTypeChanged: this.onDetectedInputTypeChanged,\n        pressDuration: pressDuration,\n        pressMoveThreshold: pressMoveThreshold,\n        shouldStopTouchMovePropagation: true,\n        style: getContainerStyle(smallImage, style)\n      }, React.createElement('img', {\n        src: smallImage.src,\n        srcSet: smallImage.srcSet,\n        sizes: smallImage.sizes,\n        alt: smallImage.alt,\n        className: imageClassName,\n        style: getSmallImageStyle(smallImage, imageStyle),\n        ref: function ref(el) {\n          return _this2.smallImageEl = el;\n        },\n        onLoad: this.onSmallImageLoad,\n        onError: onError\n      }), isHintEnabled && React.createElement(DisplayUntilActive, {\n        shouldHideAfterFirstActivation: shouldHideHintAfterFirstActivation\n      }, React.createElement(HintComponent, {\n        isTouchDetected: isTouchDetected,\n        hintTextMouse: hintTextMouse,\n        hintTextTouch: hintTextTouch\n      })), this.shouldShowLens && React.createElement(Lens, {\n        cursorOffset: cursorOffset,\n        fadeDurationInMs: fadeDurationInMs,\n        smallImage: smallImage,\n        style: lensStyle\n      }), React.createElement(RenderEnlargedImage, {\n        containerClassName: enlargedImageContainerClassName,\n        containerDimensions: this.enlargedImageContainerDimensions,\n        containerStyle: enlargedImageContainerStyle,\n        cursorOffset: cursorOffset,\n        fadeDurationInMs: fadeDurationInMs,\n        imageClassName: enlargedImageClassName,\n        imageStyle: enlargedImageStyle,\n        largeImage: largeImage,\n        smallImage: smallImage,\n        portalId: enlargedImagePortalId,\n        isPortalEnabledForTouch: isEnlargedImagePortalEnabledForTouch,\n        isTouchDetected: this.isTouchDetected,\n        isInPlaceMode: this.isInPlaceMode\n      }));\n    }\n  }, {\n    key: 'smallImage',\n    get: function get() {\n      var _props2 = this.props,\n          smallImage = _props2.smallImage,\n          isFluidWidth = _props2.smallImage.isFluidWidth;\n\n      if (!isFluidWidth) {\n        return smallImage;\n      }\n\n      var _state = this.state,\n          fluidWidth = _state.smallImageWidth,\n          fluidHeight = _state.smallImageHeight;\n      return objectAssign({}, smallImage, {\n        width: fluidWidth,\n        height: fluidHeight\n      });\n    }\n  }, {\n    key: 'enlargedImagePlacement',\n    get: function get() {\n      var userDefinedEnlargedImagePosition = this.props.enlargedImagePosition;\n      var isTouchDetected = this.state.detectedInputType.isTouchDetected;\n      var computedEnlargedImagePosition = isTouchDetected ? ENLARGED_IMAGE_POSITION.over : ENLARGED_IMAGE_POSITION.beside;\n      return userDefinedEnlargedImagePosition || computedEnlargedImagePosition;\n    }\n  }, {\n    key: 'isInPlaceMode',\n    get: function get() {\n      var OVER = ENLARGED_IMAGE_POSITION.over;\n      return this.enlargedImagePlacement === OVER;\n    }\n  }, {\n    key: 'enlargedImageContainerDimensions',\n    get: function get() {\n      var _props$enlargedImageC = this.props.enlargedImageContainerDimensions,\n          containerWidth = _props$enlargedImageC.width,\n          containerHeight = _props$enlargedImageC.height;\n      var _smallImage = this.smallImage,\n          smallImageWidth = _smallImage.width,\n          smallImageHeight = _smallImage.height;\n      var isInPlaceMode = this.isInPlaceMode;\n      return {\n        width: getEnlargedImageContainerDimension({\n          containerDimension: containerWidth,\n          smallImageDimension: smallImageWidth,\n          isInPlaceMode: isInPlaceMode\n        }),\n        height: getEnlargedImageContainerDimension({\n          containerDimension: containerHeight,\n          smallImageDimension: smallImageHeight,\n          isInPlaceMode: isInPlaceMode\n        })\n      };\n    }\n  }, {\n    key: 'isTouchDetected',\n    get: function get() {\n      var isTouchDetected = this.state.detectedInputType.isTouchDetected;\n      return isTouchDetected;\n    }\n  }, {\n    key: 'shouldShowLens',\n    get: function get() {\n      return !this.isInPlaceMode && !this.isTouchDetected;\n    }\n  }, {\n    key: 'lensComponent',\n    get: function get() {\n      var _props3 = this.props,\n          shouldUsePositiveSpaceLens = _props3.shouldUsePositiveSpaceLens,\n          lensComponent = _props3.lensComponent;\n\n      if (lensComponent) {\n        return lensComponent;\n      }\n\n      if (shouldUsePositiveSpaceLens) {\n        return PositiveSpaceLens;\n      }\n\n      return NegativeSpaceLens;\n    }\n  }]);\n\n  return ReactImageMagnify;\n}(React.Component);\n\nReactImageMagnify.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  hoverDelayInMs: PropTypes.number,\n  hoverOffDelayInMs: PropTypes.number,\n  fadeDurationInMs: PropTypes.number,\n  pressDuration: PropTypes.number,\n  pressMoveThreshold: PropTypes.number,\n  isActivatedOnTouch: PropTypes.bool,\n  imageClassName: PropTypes.string,\n  imageStyle: PropTypes.object,\n  lensStyle: PropTypes.object,\n  lensComponent: PropTypes.func,\n  shouldUsePositiveSpaceLens: PropTypes.bool,\n  smallImage: SmallImageShape,\n  largeImage: LargeImageShape,\n  enlargedImageContainerClassName: PropTypes.string,\n  enlargedImageContainerStyle: PropTypes.object,\n  enlargedImageClassName: PropTypes.string,\n  enlargedImageStyle: PropTypes.object,\n  enlargedImageContainerDimensions: EnlargedImageContainerDimensions,\n  enlargedImagePosition: EnlargedImagePosition,\n  enlargedImagePortalId: PropTypes.string,\n  isEnlargedImagePortalEnabledForTouch: PropTypes.bool,\n  hintComponent: PropTypes.func,\n  hintTextMouse: PropTypes.string,\n  hintTextTouch: PropTypes.string,\n  isHintEnabled: PropTypes.bool,\n  shouldHideHintAfterFirstActivation: PropTypes.bool\n};\nReactImageMagnify.defaultProps = {\n  enlargedImageContainerDimensions: {\n    width: '100%',\n    height: '100%'\n  },\n  isEnlargedImagePortalEnabledForTouch: false,\n  fadeDurationInMs: 300,\n  hintComponent: Hint,\n  shouldHideHintAfterFirstActivation: true,\n  isHintEnabled: false,\n  hintTextMouse: 'Hover to Zoom',\n  hintTextTouch: 'Long-Touch to Zoom',\n  hoverDelayInMs: 250,\n  hoverOffDelayInMs: 150,\n  shouldUsePositiveSpaceLens: false\n};\nexport default ReactImageMagnify;","map":null,"metadata":{},"sourceType":"module"}