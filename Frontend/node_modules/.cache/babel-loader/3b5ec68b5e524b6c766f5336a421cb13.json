{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React, { PureComponent } from 'react';\nimport { createPortal } from 'react-dom';\nimport Select from 'react-select';\nimport createFocusTrap from 'focus-trap';\nimport { Manager, Reference, Popper } from 'react-popper';\nimport NodeResolver from 'react-node-resolver';\nimport shallowEqualObjects from 'shallow-equal/objects';\nimport { colors } from '@atlaskit/theme';\nimport { MenuDialog, DummyControl, defaultComponents } from './components';\n/** Are we rendering on the client or server? */\n\nvar canUseDOM = function canUseDOM() {\n  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n}; // ==============================\n// Types\n// ==============================\n// ==============================\n// Class\n// ==============================\n\n\nvar defaultStyles = {\n  groupHeading: function groupHeading(provided) {\n    return _objectSpread({}, provided, {\n      color: colors.N80\n    });\n  }\n};\nvar defaultPopperProps = {\n  modifiers: {\n    offset: {\n      offset: \"0, 8\"\n    }\n  },\n  placement: 'bottom-start'\n};\n\nvar isEmpty = function isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nvar PopupSelect =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(PopupSelect, _PureComponent);\n\n  function PopupSelect() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PopupSelect);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PopupSelect)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"focusTrap\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"menuRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"selectRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"targetRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isOpen: false,\n      mergedComponents: defaultComponents,\n      mergedPopperProps: defaultPopperProps\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (_ref) {\n      var key = _ref.key;\n\n      switch (key) {\n        case 'Escape':\n          _this.close();\n\n          break;\n\n        default:\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (_ref2) {\n      var target = _ref2.target;\n      var isOpen = _this.state.isOpen; // appease flow\n\n      if (!(target instanceof Element)) return; // NOTE: Why not use the <Blanket /> component to close?\n      // We don't want to interupt the user's flow. Taking this approach allows\n      // user to click \"through\" to other elements and close the popout.\n\n      if (isOpen && !_this.menuRef.contains(target)) {\n        _this.close();\n      } // open on target click -- we can't trust consumers to spread the onClick\n      // property to the target\n\n\n      if (!isOpen && _this.targetRef.contains(target)) {\n        _this.open();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSelectChange\", function (value, actionMeta) {\n      var _this$props = _this.props,\n          closeMenuOnSelect = _this$props.closeMenuOnSelect,\n          onChange = _this$props.onChange;\n      if (closeMenuOnSelect) _this.close();\n      if (onChange) onChange(value, actionMeta);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"open\", function () {\n      var onOpen = _this.props.onOpen;\n      if (onOpen) onOpen();\n\n      _this.setState({\n        isOpen: true\n      }, _this.initialiseFocusTrap);\n\n      _this.selectRef.select.focusOption('first'); // HACK\n\n\n      if (typeof window === 'undefined') return;\n      window.addEventListener('keydown', _this.handleKeyDown);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initialiseFocusTrap\", function () {\n      var trapConfig = {\n        clickOutsideDeactivates: true,\n        escapeDeactivates: true,\n        fallbackFocus: _this.menuRef,\n        returnFocusOnDeactivate: true\n      };\n      _this.focusTrap = createFocusTrap(_this.menuRef, trapConfig); // allow time for the HTMLElement to render\n\n      setTimeout(function () {\n        return _this.focusTrap.activate();\n      }, 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"close\", function () {\n      var onClose = _this.props.onClose;\n      if (onClose) onClose();\n\n      _this.setState({\n        isOpen: false\n      });\n\n      _this.focusTrap.deactivate();\n\n      if (typeof window === 'undefined') return;\n      window.removeEventListener('keydown', _this.handleKeyDown);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resolveTargetRef\", function (popperRef) {\n      return function (ref) {\n        _this.targetRef = ref;\n        popperRef(ref);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resolveMenuRef\", function (popperRef) {\n      return function (ref) {\n        _this.menuRef = ref;\n        popperRef(ref);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getSelectRef\", function (ref) {\n      _this.selectRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getItemCount\", function () {\n      var options = _this.props.options;\n      var count = 0;\n      options.forEach(function (groupOrOption) {\n        if (groupOrOption.options) {\n          groupOrOption.options.forEach(function () {\n            return count++;\n          });\n        } else {\n          count++;\n        }\n      });\n      return count;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMaxHeight\", function () {\n      var maxMenuHeight = _this.props.maxMenuHeight;\n      if (!_this.selectRef) return maxMenuHeight; // subtract the control height to maintain consistency\n\n      var showSearchControl = _this.showSearchControl();\n\n      var offsetHeight = showSearchControl ? _this.selectRef.select.controlRef.offsetHeight : 0;\n      var maxHeight = maxMenuHeight - offsetHeight;\n      return maxHeight;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"showSearchControl\", function () {\n      var searchThreshold = _this.props.searchThreshold;\n      return _this.getItemCount() > searchThreshold;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderSelect\", function () {\n      var _this$props2 = _this.props,\n          footer = _this$props2.footer,\n          maxMenuWidth = _this$props2.maxMenuWidth,\n          minMenuWidth = _this$props2.minMenuWidth,\n          target = _this$props2.target,\n          props = _objectWithoutProperties(_this$props2, [\"footer\", \"maxMenuWidth\", \"minMenuWidth\", \"target\"]);\n\n      var _this$state = _this.state,\n          isOpen = _this$state.isOpen,\n          mergedComponents = _this$state.mergedComponents,\n          mergedPopperProps = _this$state.mergedPopperProps;\n\n      var showSearchControl = _this.showSearchControl();\n\n      var portalDestination = canUseDOM() ? document.body : null;\n\n      var components = _objectSpread({}, mergedComponents, {\n        Control: showSearchControl ? mergedComponents.Control : DummyControl\n      });\n\n      if (!portalDestination || !isOpen) return null;\n      var popper = React.createElement(Popper, mergedPopperProps, function (_ref3) {\n        var placement = _ref3.placement,\n            ref = _ref3.ref,\n            style = _ref3.style;\n        return React.createElement(NodeResolver, {\n          innerRef: _this.resolveMenuRef(ref)\n        }, React.createElement(MenuDialog, {\n          style: style,\n          \"data-placement\": placement,\n          minWidth: minMenuWidth,\n          maxWidth: maxMenuWidth\n        }, React.createElement(Select, _extends({\n          backspaceRemovesValue: false,\n          controlShouldRenderValue: false,\n          isClearable: false,\n          tabSelectsValue: false,\n          menuIsOpen: true,\n          ref: _this.getSelectRef\n        }, props, {\n          styles: _objectSpread({}, defaultStyles, props.styles),\n          maxMenuHeight: _this.getMaxHeight(),\n          components: components,\n          onChange: _this.handleSelectChange\n        })), footer));\n      });\n      return mergedPopperProps.positionFixed ? popper : createPortal(popper, portalDestination);\n    });\n\n    return _this;\n  }\n\n  _createClass(PopupSelect, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof window === 'undefined') return;\n      window.addEventListener('click', this.handleClick);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof window === 'undefined') return;\n      window.removeEventListener('click', this.handleClick);\n    } // Event Handlers\n    // ==============================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var target = this.props.target;\n      return React.createElement(Manager, null, React.createElement(Reference, null, function (_ref4) {\n        var ref = _ref4.ref;\n        return React.createElement(NodeResolver, {\n          innerRef: _this2.resolveTargetRef(ref)\n        }, target);\n      }), this.renderSelect());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var newState = {}; // Merge consumer and default popper props\n\n      var mergedPopperProps = _objectSpread({}, defaultPopperProps, props.popperProps);\n\n      if (!shallowEqualObjects(mergedPopperProps, state.mergedPopperProps)) {\n        newState.mergedPopperProps = mergedPopperProps;\n      } // Merge consumer and default components\n\n\n      var mergedComponents = _objectSpread({}, defaultComponents, props.components);\n\n      if (!shallowEqualObjects(mergedComponents, state.mergedComponents)) {\n        newState.mergedComponents = mergedComponents;\n      }\n\n      if (!isEmpty(newState)) return newState;\n      return null;\n    }\n  }]);\n\n  return PopupSelect;\n}(PureComponent);\n\n_defineProperty(PopupSelect, \"defaultProps\", {\n  closeMenuOnSelect: true,\n  components: {},\n  maxMenuHeight: 300,\n  maxMenuWidth: 440,\n  minMenuWidth: 220,\n  popperProps: {},\n  searchThreshold: 5,\n  styles: {}\n});\n\nexport { PopupSelect as default };","map":null,"metadata":{},"sourceType":"module"}