{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React, { Component } from 'react';\nimport { cleanProps } from '@atlaskit/analytics-next';\n/**\n * Styling a button is complicated and there are a number of properties which inform its appearance.\n * We want to be able to style any arbitrary component like a button, but we don't want to pass all\n * of these appearance-related props through to the component or underlying DOM node. This component\n * acts as a layer which catches the appearance-related properties so that they can be used by\n * styled-components, then passes the rest of the props on to the custom component.\n */\n\nvar CustomComponentProxy =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomComponentProxy, _Component);\n\n  function CustomComponentProxy() {\n    _classCallCheck(this, CustomComponentProxy);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomComponentProxy).apply(this, arguments));\n  }\n\n  _createClass(CustomComponentProxy, [{\n    key: \"render\",\n    value: function render() {\n      var _cleanProps = cleanProps(this.props),\n          appearance = _cleanProps.appearance,\n          children = _cleanProps.children,\n          component = _cleanProps.component,\n          isActive = _cleanProps.isActive,\n          isDisabled = _cleanProps.isDisabled,\n          isFocus = _cleanProps.isFocus,\n          isHover = _cleanProps.isHover,\n          isSelected = _cleanProps.isSelected,\n          shouldFitContainer = _cleanProps.shouldFitContainer,\n          fit = _cleanProps.fit,\n          iconBefore = _cleanProps.iconBefore,\n          iconAfter = _cleanProps.iconAfter,\n          isLoading = _cleanProps.isLoading,\n          proxiedProps = _objectWithoutProperties(_cleanProps, [\"appearance\", \"children\", \"component\", \"isActive\", \"isDisabled\", \"isFocus\", \"isHover\", \"isSelected\", \"shouldFitContainer\", \"fit\", \"iconBefore\", \"iconAfter\", \"isLoading\"]);\n\n      if (!component) throw new Error('No custom component provided while trying to use custom button component');\n      var ProxiedComponent = component;\n      return React.createElement(ProxiedComponent, proxiedProps, children);\n    }\n  }]);\n\n  return CustomComponentProxy;\n}(Component);\n\nexport default CustomComponentProxy;","map":null,"metadata":{},"sourceType":"module"}