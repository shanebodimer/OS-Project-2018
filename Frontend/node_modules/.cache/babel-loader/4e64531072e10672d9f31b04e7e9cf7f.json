{"ast":null,"code":"import clamp from 'clamp';\nimport { getContainerToImageRatio, getSmallToLargeImageRatio } from './imageRatio';\n\nfunction getMinCoordinates(container, largeImage) {\n  return {\n    x: (largeImage.width - container.width) * -1,\n    y: (largeImage.height - container.height) * -1\n  };\n}\n\nfunction getMaxCoordinates() {\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nexport function getLensModeEnlargedImageCoordinates(_ref) {\n  var containerDimensions = _ref.containerDimensions,\n      lensCursorOffset = _ref.cursorOffset,\n      largeImage = _ref.largeImage,\n      position = _ref.position,\n      smallImage = _ref.smallImage;\n  var adjustedPosition = getCursorPositionAdjustedForLens(position, lensCursorOffset);\n  var ratio = getSmallToLargeImageRatio(smallImage, largeImage);\n  var coordinates = {\n    x: Math.round(adjustedPosition.x * ratio.x) * -1,\n    y: Math.round(adjustedPosition.y * ratio.y) * -1\n  };\n  var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n  var maxCoordinates = getMaxCoordinates();\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\nexport function getInPlaceEnlargedImageCoordinates(_ref2) {\n  var containerDimensions = _ref2.containerDimensions,\n      largeImage = _ref2.largeImage,\n      position = _ref2.position;\n  var minCoordinates = getMinCoordinates(containerDimensions, largeImage);\n  var maxCoordinates = getMaxCoordinates();\n  var ratio = getContainerToImageRatio(containerDimensions, largeImage);\n  var coordinates = {\n    x: Math.round(position.x * ratio.x) * -1,\n    y: Math.round(position.y * ratio.y) * -1\n  };\n  return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nfunction clampImageCoordinates(imageCoordinates, minCoordinates, maxCoordinates) {\n  return {\n    x: clamp(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n    y: clamp(imageCoordinates.y, minCoordinates.y, maxCoordinates.y)\n  };\n}\n\nfunction getCursorPositionAdjustedForLens(position, lensCursorOffset) {\n  return {\n    x: position.x - lensCursorOffset.x,\n    y: position.y - lensCursorOffset.y\n  };\n}","map":null,"metadata":{},"sourceType":"module"}